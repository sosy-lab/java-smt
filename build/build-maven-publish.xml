<!--
This file is part of JavaSMT,
an API wrapper for a collection of SMT solvers:
https://github.com/sosy-lab/java-smt

SPDX-FileCopyrightText: 2020 Dirk Beyer <https://www.sosy-lab.org>

SPDX-License-Identifier: Apache-2.0
-->

<project name="maven" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <!-- Defined maven snapshots and staging repository id and url -->
    <property name="ossrh-snapshots-repository-url"
        value="https://oss.sonatype.org/content/repositories/snapshots" />
    <property name="ossrh-staging-repository-url"
        value="https://oss.sonatype.org/service/local/staging/deploy/maven2" />

    <!-- There server id in the Maven settings.xml -->
    <property name="ossrh-server-id" value="ossrh" />

    <target name="gen-pom" depends="load-ivy, determine-version" description="Generate a POM file from Ivy metadata">
        <property name="ivy.pom.version" value="${version}"/>

        <ivy:makepom ivyfile="${ivy.dep.file}" conf="core,runtime-smtinterpol,runtime-princess-with-javacup" pomfile="pom.xml" templatefile="pom_template.xml">
            <mapping conf="core,runtime-smtinterpol,runtime-princess-with-javacup" scope="compile"/>
        </ivy:makepom>

        <!-- Maven group is "sosy-lab", not "sosy_lab"-->
        <replace file="pom.xml">
            <replacetoken>sosy_lab</replacetoken>
            <replacevalue>sosy-lab</replacevalue>
        </replace>
    </target>

    <!-- before this, please check that the project version is set correctly! -->
    <target name="stage" depends="dist, gen-pom, jar, sources" description="deploy release version to Maven staging repository">
		<fail message="unexpected filename of jar">
			<condition> <!-- see property in build-jar.xml -->
                <not><equals arg1="${jar.file}" arg2="${ivy.module}-${version}.jar"/></not>
            </condition>
        </fail>
        <stage-javasmt-file filename="${ivy.module}-${version}" fileending="jar"/>
        <stage-javasmt-file filename="${ivy.module}-${version}-sources" fileending="jar" classifier="sources"/>
        <stage-javasmt-file filename="${ivy.module}-${version}-javadoc" fileending="jar" classifier="javadoc"/>
    </target>

    <!-- macro for pushing a JavaSMT file into a Maven repository
         (push into the staging area, from there manual publication is required afterwards) -->
    <macrodef name="stage-javasmt-file">
      <attribute name="filename"/>
      <attribute name="fileending"/>
      <attribute name="filedirectory" default="."/>
      <attribute name="classifier" default=""/>
      <sequential>
        <artifact:mvn>
          <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
          <arg value="-Durl=${ossrh-staging-repository-url}" />
          <arg value="-DrepositoryId=${ossrh-server-id}" />
          <arg value="-DpomFile=pom.xml" />
          <arg value="-Dfile=@{filedirectory}/@{filename}.@{fileending}" />
          <arg value="-Dclassifier=@{classifier}" />
          <arg value="-Pgpg" />
        </artifact:mvn>
      </sequential>
    </macrodef>

    <!-- macro for preparing a pom-file for a solver before pushing it into a Maven repository -->
    <macrodef name="generate-solver-pom-file">
      <attribute name="pomFileTemplate" default="solvers_maven_conf/maven_${stage.solver}_pom_template.xml"/>
      <attribute name="pomFile" default="solvers_maven_conf/maven_${stage.solver}_pom.xml"/>
      <sequential>
        <ivy:makepom ivyfile="solvers_ivy_conf/ivy_${stage.solver}.xml" conf="solver-${stage.solver}"
                     pomfile="@{pomFile}" templatefile="@{pomFileTemplate}">
            <mapping conf="solver-${stage.solver}" scope="compile"/>
            <!-- We currently do not have Ivy-based dependencies for solver libraries.
                 The mapping is irrelevant and the generated pom-file does not contain dependencies. -->
        </ivy:makepom>
      </sequential>
    </macrodef>

    <!-- macro for pushing solvers into a Maven repository
         (push into the staging area, from there manual publication is required afterwards) -->
    <macrodef name="stage-solver-file">
      <!-- 'filename' is only used for reading file from file-system, not used "in" Maven -->
      <attribute name="filename"/>
      <!-- the Maven 'classifier' should be empty for JAR files, otherwise use common classifiers
           like 'sources' or 'javadoc, or (for binary files:) 'filename[-arch]'. -->
      <attribute name="classifier" default=""/>
      <attribute name="fileending"/>
      <attribute name="filedirectory" default="lib/java/runtime-${stage.solver}"/>
      <attribute name="pomFile" default="solvers_maven_conf/maven_${stage.solver}_pom.xml"/>
      <sequential>
        <artifact:mvn>
          <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
          <arg value="-Durl=${ossrh-staging-repository-url}" />
          <arg value="-DrepositoryId=${ossrh-server-id}" />
          <arg value="-DpomFile=@{pomFile}" />
          <arg value="-Dfile=@{filedirectory}/@{filename}.@{fileending}" />
          <arg value="-Dclassifier=@{classifier}" />
          <arg value="-Dpackaging=@{fileending}" />
          <arg value="-Dversion=${stage.revision}" />
          <arg value="-DgeneratePom=false" />
          <arg value="-Pgpg" />
        </artifact:mvn>
      </sequential>
    </macrodef>

    <target name="stage-opensmt" depends="build-dependencies, install-contrib"
            description="deploy current version of OpenSMT to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="opensmt"/>
        <property name="stage.revision" value="${opensmt.revision}"/>
        <property name="libDir.x64" value="lib/java/runtime-opensmt/x64"/>
        <property name="libDir.arm64" value="lib/java/runtime-opensmt/arm64"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <stage-solver-file filename="opensmt" fileending="jar"/>
        <stage-solver-file filename="libopensmtj" classifier="libopensmtj-x64" filedirectory="${libDir.x64}" fileending="so"/>
        <stage-solver-file filename="libopensmtj" classifier="libopensmtj-arm64" filedirectory="${libDir.arm64}" fileending="so"/>
        <stage-solver-file filename="opensmt-sources" fileending="jar" classifier="sources" filedirectory="lib/java-contrib"/>
        <stage-solver-file filename="opensmt-javadoc" fileending="jar" classifier="javadoc" filedirectory="lib/java-contrib"/>
    </target>
    
    <target name="stage-mathsat5" depends="build-dependencies, install-contrib"
            description="deploy current version of MathSAT to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]" conf="runtime-mathsat"/>
        <property name="stage.solver" value="mathsat"/>
        <property name="stage.revision" value="${mathsat.revision}"/>
        <property name="libDir.x64" value="lib/java/runtime-mathsat/x64"/>
        <property name="libDir.arm64" value="lib/java/runtime-mathsat/arm64"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <stage-solver-file filename="libmathsat5j" classifier="libmathsat5j-x64" filedirectory="${libDir.x64}" fileending="so"/>
        <stage-solver-file filename="libmathsat5j" classifier="libmathsat5j-arm64" filedirectory="${libDir.arm64}" fileending="so"/>
        <stage-solver-file filename="mathsat" classifier="mathsat-x64" filedirectory="${libDir.x64}" fileending="dll"/>
        <stage-solver-file filename="mathsat5j" classifier="mathsat5j-x64" filedirectory="${libDir.x64}" fileending="dll"/>
        <stage-solver-file filename="mpir" classifier="mpir-x64" filedirectory="${libDir.x64}" fileending="dll"/>
    </target>

    <target name="stage-z3" depends="build-dependencies, install-contrib"
            description="deploy current version of Z3 to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="z3"/>
        <property name="stage.revision" value="${com.microsoft.z3.revision}"/>
        <property name="libDir.x64" value="lib/java/runtime-z3/x64"/>
        <property name="libDir.arm64" value="lib/java/runtime-z3/arm64"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <!-- common Java files -->
        <stage-solver-file filename="com.microsoft.z3" fileending="jar"/>
        <stage-solver-file filename="com.microsoft.z3-sources" fileending="jar" classifier="sources" filedirectory="lib/java-contrib"/>
        <stage-solver-file filename="com.microsoft.z3-javadoc" fileending="jar" classifier="javadoc" filedirectory="lib/java-contrib"/>
        <!-- for x64 arch -->
        <stage-solver-file filename="libz3java" classifier="libz3java-x64" filedirectory="${libDir.x64}" fileending="so"/>
        <stage-solver-file filename="libz3java" classifier="libz3java-x64" filedirectory="${libDir.x64}" fileending="dll"/>
        <stage-solver-file filename="libz3java" classifier="libz3java-x64" filedirectory="${libDir.x64}" fileending="dylib"/>
        <stage-solver-file filename="libz3" classifier="libz3-x64" filedirectory="${libDir.x64}" fileending="so"/>
        <stage-solver-file filename="libz3" classifier="libz3-x64" filedirectory="${libDir.x64}" fileending="dll"/>
        <stage-solver-file filename="libz3" classifier="libz3-x64" filedirectory="${libDir.x64}" fileending="dylib"/>
        <!-- for arm64 arch -->
        <stage-solver-file filename="libz3java" classifier="libz3java-arm64" filedirectory="${libDir.arm64}" fileending="so"/>
        <stage-solver-file filename="libz3java" classifier="libz3java-arm64" filedirectory="${libDir.arm64}" fileending="dll"/>
        <stage-solver-file filename="libz3java" classifier="libz3java-arm64" filedirectory="${libDir.arm64}" fileending="dylib"/>
        <stage-solver-file filename="libz3" classifier="libz3-arm64" filedirectory="${libDir.arm64}" fileending="so"/>
        <stage-solver-file filename="libz3" classifier="libz3-arm64" filedirectory="${libDir.arm64}" fileending="dll"/>
        <stage-solver-file filename="libz3" classifier="libz3-arm64" filedirectory="${libDir.arm64}" fileending="dylib"/>
    </target>

    <target name="stage-bitwuzla" depends="build-dependencies, install-contrib"
            description="deploy current version of Bitwuzla to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="bitwuzla"/>
        <property name="stage.revision" value="${bitwuzla.revision}"/>
        <property name="libDir.x64" value="lib/java/runtime-bitwuzla/x64"/>
        <property name="libDir.arm64" value="lib/java/runtime-bitwuzla/arm64"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <stage-solver-file filename="bitwuzla" fileending="jar"/>
        <stage-solver-file filename="libbitwuzlaj" classifier="libbitwuzlaj-x64" filedirectory="${libDir.x64}" fileending="so"/>
        <stage-solver-file filename="libbitwuzlaj" classifier="libbitwuzlaj-arm64" filedirectory="${libDir.arm64}" fileending="so"/>
        <stage-solver-file filename="libbitwuzlaj" classifier="libbitwuzlaj-x64" filedirectory="${libDir.x64}" fileending="dll"/>
        <stage-solver-file filename="bitwuzla-sources" fileending="jar" classifier="sources" filedirectory="lib/java-contrib"/>
        <stage-solver-file filename="bitwuzla-javadoc" fileending="jar" classifier="javadoc" filedirectory="lib/java-contrib"/>
    </target>

    <target name="stage-boolector" depends="build-dependencies"
            description="deploy current version of Boolector to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="boolector"/>
        <property name="stage.revision" value="${libboolector.revision}"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <stage-solver-file filename="libboolector" classifier="libboolector" fileending="so"/>
        <stage-solver-file filename="libminisat" classifier="libminisat" fileending="so"/>
        <stage-solver-file filename="libpicosat" classifier="libpicosat" fileending="so"/>
    </target>

    <target name="stage-cvc4" depends="build-dependencies"
            description="deploy current version of CVC4 to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="cvc4"/>
        <property name="stage.revision" value="${CVC4.revision}"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <stage-solver-file filename="CVC4" fileending="jar"/>
        <stage-solver-file filename="libcvc4" classifier="libcvc4" fileending="so"/>
        <stage-solver-file filename="libcvc4jni" classifier="libcvc4jni" fileending="so"/>
        <stage-solver-file filename="libcvc4parser" classifier="libcvc4parser" fileending="so"/>
    </target>

    <target name="stage-cvc5" depends="build-dependencies"
            description="deploy current version of CVC5 to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="cvc5"/>
        <property name="stage.revision" value="${cvc5.revision}"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <stage-solver-file filename="cvc5" fileending="jar"/>
        <stage-solver-file filename="libcvc5" classifier="libcvc5" fileending="so"/>
        <stage-solver-file filename="libcvc5jni" classifier="libcvc5jni" fileending="so"/>
        <stage-solver-file filename="libcvc5parser" classifier="libcvc5parser" fileending="so"/>
        <stage-solver-file filename="libpoly" classifier="libpoly" fileending="so"/>
        <stage-solver-file filename="libpolyxx" classifier="libpolyxx" fileending="so"/>
    </target>

    <!--
    Yices2 consists of two parts:
     - we release our JavaSMT-based bindings for Yices2.
     - we release our Yices2 itself.
    We do currently not track any dependency within Maven, but rely on the developer to provide them,
    i.e., by including both packages in a proper JavaSMT deployment.
    -->
    <target name="stage-javasmt-yices2" depends="build-dependencies, install-contrib"
            description="deploy current version of Yices2 to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="javasmt_yices2"/>
        <property name="stage.revision" value="${javasmt-yices2.revision}"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the files -->
        <stage-solver-file filename="javasmt-yices2" fileending="jar" filedirectory="lib/java/runtime-yices2"/>
        <stage-solver-file filename="javasmt-yices2-sources" fileending="jar" classifier="sources" filedirectory="lib/java-contrib"/>
    </target>
    <target name="stage-yices2" depends="build-dependencies"
            description="deploy current version of Yices2 to Maven staging repository">
        <!-- get revision from dependencies -->
        <ivy:artifactproperty name="[artifact].revision" value="[revision]"/>
        <property name="stage.solver" value="yices2"/>
        <property name="stage.revision" value="${libyices2j.revision}"/>
        <!-- prepare the pom-file -->
        <generate-solver-pom-file/>
        <!-- then publish the file -->
        <stage-solver-file filename="libyices2j" classifier="libyices2j" fileending="so"/>
    </target>
</project>
