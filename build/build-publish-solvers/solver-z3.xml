<?xml version="1.0" encoding="UTF-8" ?>

<!--
This file is part of JavaSMT,
an API wrapper for a collection of SMT solvers:
https://github.com/sosy-lab/java-smt

SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>

SPDX-License-Identifier: Apache-2.0
-->

<!-- vim: set tabstop=8 shiftwidth=4 expandtab sts=4 filetype=ant fdm=marker: -->
<project name="publish-solvers-z3" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <import file="macros.xml"/>

    <property name="z3.dist.dir" value="${ivy.solver.dist.dir}/z3"/>
    <property name="z3.project.name" value="Java Bindings for Z3"/>
    <property name="z3.javadoc.dir" value="Javadoc-z3"/>

    <target name="check-z3-path">
        <fail unless="z3.path">
            INFO
            Please specify the path to Z3 sources directory with the flag '-Dz3.path=/path/to/z3/z3-unpacked-sources'.
            The path should contain directories like './src/' and './scripts/', and can be relative or absolute.
            Please provide all unpacked releases (Linux, MacOS, and Windows for x64 and arm64
            architecture) in the same parent directory './../' above the 'z3.path'.
            This script does not expect other z3-related files or directories in the parent directory.
            For example, the directory structure can look like this:

            z3/                                 // &lt;-- parent directory
             |-- z3-4.13.2-arm64-glibc-2.34/    // &lt;-- unpacked release artifact
             |-- z3-4.13.2-arm64-osx-11.0/
             |-- z3-4.13.2-arm64-win/
             |-- z3-4.13.2-x64-glibc-2.35/
             |-- z3-4.13.2-x64-osx-12.7.6/
             |-- z3-4.13.2-x64-win/
             |-- z3-z3-4.13.2/                  // &lt;-- sources directory as 'z3.path'

            This can be achieved by:
            - download all artifacts (Linux, MacOS, and Windows for x64 and arm64 architecture)
              from the Z3 release webpage (https://github.com/Z3Prover/z3/releases)
            - create an empty directory 'z3/' and unpack all artifact into it.
            - in the sources directory execute `python scripts/mk_make.py --java` to generate all
              Java related files (required for JavaDoc). Executing `make` is not required.
        </fail>
    </target>

    <target name="package-z3" depends="check-z3-path,get-z3-version, package-z3-sources, package-z3-javadoc">
        <!-- collect all files -->
        <copy todir="${z3.dist.dir}/" flatten="true" verbose="true">
            <fileset dir="${z3.path}/../">
                <include name="z3-*-x64-glibc-*/bin/com.microsoft.z3.jar"/>
            </fileset>
        </copy>
        <copy todir="${z3.dist.dir}/x64/" flatten="true" verbose="true">
            <fileset dir="${z3.path}/../">
                <include name="z3-*-x64-glibc-*/bin/libz3*.so"/>
                <include name="z3-*-x64-osx-*/bin/libz3*.dylib"/>
                <include name="z3-*-x64-win/bin/**/*z3*.dll"/>
            </fileset>
        </copy>
        <copy todir="${z3.dist.dir}/arm64/" flatten="true" verbose="true">
            <fileset dir="${z3.path}/../">
                <include name="z3-*-arm64-glibc-*/bin/libz3*.so"/>
                <include name="z3-*-arm64-osx-*/bin/libz3*.dylib"/>
                <include name="z3-*-arm64-win/bin/**/*z3*.dll"/>
            </fileset>
        </copy>

        <!-- check for properties of Z3 for Linux -->
        <exec executable="readelf" dir="./" outputproperty="z3.elf_details" logError="true" failonerror="true">
            <arg value="-d"/>
            <arg value="${z3.dist.dir}/x64/libz3.so"/>
        </exec>
        <fail>
            <condition>
                <not><contains string="${z3.elf_details}" substring="(SONAME)"/></not>
            </condition>
            libz3.so has missing SONAME property.
            Please run 'patchelf --set-soname libz3.so ${z3.path}/libz3.so'.
        </fail>

        <!-- Linux files -->
        <move file="${z3.dist.dir}/x64/libz3.so" tofile="${z3.dist.dir}/x64/libz3-${z3.version}.so" verbose="true"/>
        <move file="${z3.dist.dir}/x64/libz3java.so" tofile="${z3.dist.dir}/x64/libz3java-${z3.version}.so" verbose="true"/>
        <move file="${z3.dist.dir}/arm64/libz3.so" tofile="${z3.dist.dir}/arm64/libz3-${z3.version}.so"/>
        <move file="${z3.dist.dir}/arm64/libz3java.so" tofile="${z3.dist.dir}/arm64/libz3java-${z3.version}.so"/>
        <!-- Windows files -->
        <move file="${z3.dist.dir}/x64/libz3.dll" tofile="${z3.dist.dir}/x64/libz3-${z3.version}.dll" verbose="true"/>
        <move file="${z3.dist.dir}/x64/libz3java.dll" tofile="${z3.dist.dir}/x64/libz3java-${z3.version}.dll" verbose="true"/>
        <move file="${z3.dist.dir}/arm64/libz3.dll" tofile="${z3.dist.dir}/arm64/libz3-${z3.version}.dll" verbose="true"/>
        <move file="${z3.dist.dir}/arm64/z3java.dll" tofile="${z3.dist.dir}/arm64/libz3java-${z3.version}.dll" verbose="true"/>
        <!-- MacOS files -->
        <move file="${z3.dist.dir}/x64/libz3.dylib" tofile="${z3.dist.dir}/x64/libz3-${z3.version}.dylib" verbose="true"/>
        <move file="${z3.dist.dir}/x64/libz3java.dylib" tofile="${z3.dist.dir}/x64/libz3java-${z3.version}.dylib" verbose="true"/>
        <move file="${z3.dist.dir}/arm64/libz3.dylib" tofile="${z3.dist.dir}/arm64/libz3-${z3.version}.dylib" verbose="true"/>
        <move file="${z3.dist.dir}/arm64/libz3java.dylib" tofile="${z3.dist.dir}/arm64/libz3java-${z3.version}.dylib" verbose="true"/>
        <!-- common Java file, Java is platform independent -->
        <move file="${z3.dist.dir}/com.microsoft.z3.jar" tofile="${z3.dist.dir}/com.microsoft.z3-${z3.version}.jar"/>
    </target>

    <target name="get-z3-version" unless="z3.version" depends="check-z3-path">
        <echo>Option -Dz3.version=... not specified. Trying to determine z3.version from git repository. This will fail if git repository is not available.</echo>
        <exec executable="git" dir="${z3.path}" outputproperty="z3.version" failonerror="true">
            <arg value="describe"/>
        </exec>
    </target>

    <target name="publish-z3" depends="package-z3, load-ivy"
        description="Publish Z3 binaries to Ivy repo.">
        <ivy:resolve conf="solver-z3,solver-z3-x64,solver-z3-arm64,sources,javadoc" file="solvers_ivy_conf/ivy_z3.xml"/>
        <publishToRepository solverName="Z3" solverVersion="${z3.version}" distDir="${z3.dist.dir}"/>

        <!--
          We additionally provide x64-files without arch-attribute for backwards compatibility,
          such that applications can load dependencies without changing their Ivy configuration.
          Those files are not part of any direct configuration, but will be resolved if the
          arch-attribute is not used.
        -->
        <echo>
            Lets copy the files for architecture x64 into main directory, for backwards compatibility.
            Afterwards, please execute the SVN command from above.
        </echo>
        <copy todir="repository/${ivy.organisation}/${ivy.module}/" verbose="true">
            <fileset dir="repository/${ivy.organisation}/${ivy.module}/x64/">
                <include name="*-${z3.version}.*"/>
            </fileset>
        </copy>
    </target>

    <target name="check-z3-sources">
        <!-- check for prepared Java sources -->
        <available file="${z3.path}/src/api/java/Expr.java"
                   property="isZ3NativeExprAvailable"/>
        <fail unless="isZ3NativeExprAvailable" message="The sources of Z3 (Java bindings) can not be found."/>
        <available file="${z3.path}/src/api/java/Native.java"
                   property="isZ3NativeApiFileAvailable"/>
        <fail unless="isZ3NativeApiFileAvailable" message="The sources of Z3 are not yet prepared. Please execute `python scripts/mk_make.py --java` to generate all Java related files. Executing `make` is not required."/>
    </target>

    <target name="package-z3-sources" depends="get-z3-version, check-z3-sources">
        <jar destfile="${z3.dist.dir}/com.microsoft.z3-${z3.version}-sources.jar" whenmanifestonly="fail">
            <zipfileset dir="${z3.path}/src/api/java" includes="**/*.java" prefix="com/microsoft/z3"/>
            <zipfileset dir="${z3.path}/" includes="LICENSE.txt" prefix="META-INF"/>
            <manifest>
                <attribute name="Implementation-Title" value="${z3.project.name}"/>
                <attribute name="Implementation-Version" value="${z3.version}"/>
            </manifest>
        </jar>
    </target>

    <target name="z3-javadoc" depends="get-z3-version, check-z3-sources">
        <!-- cleanup -->
        <delete dir="${z3.javadoc.dir}" quiet="true"/>
        <!-- then write new files.
             Lets ignore minor issues, e.g. using html tag <tt> instead of <code> -->
        <javadoc
            destdir="${z3.javadoc.dir}"
            classpathref="classpath"
            locale="en_US"
            encoding="utf-8"
            windowtitle="${z3.project.name}"
            failonerror="false"
            failonwarning="false"
            overview="doc/javadoc_overview.html"
            >
            <fileset dir="${z3.path}/src/api/java">
                <include name="**/*.java"/>
            </fileset>
            <link href="https://docs.oracle.com/en/java/javase/11/docs/api/"/>
            <doctitle><![CDATA[<h1>${z3.project.name}</h1>]]></doctitle>
            <tag name="apiNote" description="API Note:"/>
            <tag name="implSpec" description="Implementation Requirements:"/>
            <tag name="implNote" description="Implementation Note:"/>
            <arg line="${javadoc.doclint}"/>
        </javadoc>
    </target>

    <target name="package-z3-javadoc" depends="z3-javadoc">
        <jar jarfile="${z3.dist.dir}/com.microsoft.z3-${z3.version}-javadoc.jar" whenmanifestonly="fail">
            <zipfileset dir="${z3.path}/" includes="LICENSE.txt" prefix="META-INF"/>
            <fileset dir="${z3.javadoc.dir}"/>
        </jar>
    </target>
</project>
