<?xml version="1.0" encoding="UTF-8" ?>

<!--
This file is part of JavaSMT,
an API wrapper for a collection of SMT solvers:
https://github.com/sosy-lab/java-smt

SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>

SPDX-License-Identifier: Apache-2.0
-->

<!-- vim: set tabstop=8 shiftwidth=4 expandtab sts=4 filetype=ant fdm=marker: -->
<project name="publish-solvers-opensmt" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="opensmt.dist.dir" value="${ivy.solver.dist.dir}/opensmt"/>

    <import file="macros.xml"/>

    <target name="set-properties-for-opensmt">
        <checkPathOption pathOption="opensmt.path" defaultPath="/path/to/opensmt" targetName="OpenSMT source folder (git checkout from 'https://github.com/usi-verification-and-security/opensmt.git)"/>

        <!--
            Please provide GMP from http://gmplib.org/ in version 6.3.0 (version 6.2.1 also works) and build GMP:
            For linux-x64:
                ./configure -?-enable-cxx -?-with-pic -?-disable-shared -?-enable-static -?-enable-fat
                make -j4
            For linux-arm64:
                ./configure -?-enable-cxx -?-with-pic -?-disable-shared -?-enable-static -?-enable-fat \
                     -?-host=aarch64-linux-gnu \
                     CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ LD=aarch64-linux-gnu-ld
                make -j4
        -->
        <checkPathOption pathOption="gmp-linux-x64.path" defaultPath="/path/to/gmp" targetName="GMP directory (Linux x64)"/>
        <checkPathOption pathOption="gmp-linux-arm64.path" defaultPath="/path/to/gmp" targetName="GMP directory (Linux arm64)"/>
        <checkPathOption pathOption="jdk-linux-arm64.path" defaultPath="/path/to/jdk" targetName="JDK source folder (Linux arm64 version)"/>

        <fail unless="opensmt.customRev">
            Please specify a custom revision with the flag -Dopensmt.customRev=XXX.
            The custom revision has to be unique amongst the already known version
            numbers from the ivy repository. The script will append the git revision.
        </fail>

        <!-- Get a naive version -->
        <exec executable="git" dir="${opensmt.path}" outputproperty="opensmt.revision" failonerror="true">
            <arg value="show"/>
            <arg value="-s"/>
            <arg value="--format=%h"/>
        </exec>
        <property name="opensmt.version" value="${opensmt.customRev}-g${opensmt.revision}"/>
        <echo message="Building OpenSMT in version '${opensmt.version}'"/>

        <!-- set properties for the next steps -->
        <property name="opensmt.version" value="${opensmt.customRev}-g${opensmt.revision}"/>
        <property name="opensmt.installPath" location="${opensmt.path}/install"/>
        <property name="source.path" location="lib/native/source/opensmt"/>
        <property name="source.installPathLinuxX64" location="${source.path}/install-linux-x64"/>
        <property name="source.installPathLinuxArm64" location="${source.path}/install-linux-arm64"/>

        <!-- cleanup target directories, will be created and filled during the build-process -->
        <delete dir="${source.installPathLinuxX64}" quiet="true"/>
        <delete dir="${source.installPathLinuxArm64}" quiet="true"/>
        <delete dir="${source.path}/build" quiet="true"/>
        <delete dir="${source.path}/doc" quiet="true"/>
        <delete dir="${source.path}/install" quiet="true"/>
    </target>

    <target name="compile-opensmt-linux-x64" depends="set-properties-for-opensmt">
        <delete dir="${opensmt.installPath}" quiet="true"/>
        <echo message="Building OpenSMT in version '${opensmt.version}' for Linux x64"/>

        <!-- Patch OpenSMT to avoid swig errors and add some required features -->
        <exec executable="git" dir="${opensmt.path}" failonerror="true">
            <arg value="apply"/>
            <arg value="${source.path}/api.patch"/>
        </exec>

        <!-- Build OpenSMT,
                     Make sure to remove the old 'build/' directory from OpenSMT!
                     It keeps old build commands and previous cmake-flags. -->
        <delete dir="${opensmt.path}/build" quiet="true"/>
        <exec executable="make" dir="${opensmt.path}" failonerror="true">
            <arg value="INSTALL_DIR=${opensmt.installPath}"/>
            <arg value="CMAKE_FLAGS=-DFORCE_STATIC_GMP=ON"/>
            <arg value="install"/>
        </exec>

        <!-- Revert the patch -->
        <exec executable="git" dir="${opensmt.path}" failonerror="true">
            <arg value="apply"/>
            <arg value="-R"/>
            <arg value="${source.path}/api.patch"/>
        </exec>

        <!-- copy OpenSMT include files to JavaSMT -->
        <copy todir="${source.installPathLinuxX64}">
            <fileset dir="${opensmt.installPath}"/>
        </copy>
    </target>

    <target name="compile-opensmt-linux-arm64" depends="set-properties-for-opensmt">
        <delete dir="${opensmt.installPath}" quiet="true"/>
        <echo message="Building OpenSMT in version '${opensmt.version}' for Linux arm64"/>

        <!-- Patch OpenSMT to avoid swig errors and add some required features -->
        <exec executable="git" dir="${opensmt.path}" failonerror="true">
            <arg value="apply"/>
            <arg value="${source.path}/api.patch"/>
        </exec>

        <!-- Build OpenSMT,
             Make sure to remove the old 'build/' directory from OpenSMT!
             It keeps old build commands and previous cmake-flags. -->
        <delete dir="${opensmt.path}/build" quiet="true"/>
        <exec executable="make" dir="${opensmt.path}" failonerror="true">
            <arg value="INSTALL_DIR=${opensmt.installPath}"/>
            <!-- The next arg is ONE large parameter. If executed manually outside of ant, please wrap it in quotes. -->
            <arg value="CMAKE_FLAGS=-DFORCE_STATIC_GMP=ON -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DGMP_LIBRARY=${gmp-linux-arm64.path}/.libs/libgmp.a -DGMPXX_LIBRARY=${gmp-linux-arm64.path}/.libs/libgmpxx.a -DGMP_INCLUDE_DIR=${gmp-linux-arm64.path}"/>
            <arg value="install"/>
        </exec>

        <!-- Revert the patch -->
        <exec executable="git" dir="${opensmt.path}" failonerror="true">
            <arg value="apply"/>
            <arg value="-R"/>
            <arg value="${source.path}/api.patch"/>
        </exec>

        <!-- copy OpenSMT include files to JavaSMT -->
        <copy todir="${source.installPathLinuxArm64}">
            <fileset dir="${opensmt.installPath}"/>
        </copy>
    </target>

    <!-- Run swig to generate a new wrapper. -->
    <!-- Depends on compile-opensmt-* for generating the API files. -->
    <target name="build-opensmt-wrapper" depends="compile-opensmt-linux-x64">
        <!--
            This ant-step uses the Linux x64 dependencies for building the SWIG-wrapper.
            Any other dependencies, e.g., Windows or Linux for other platforms, are identical
            and would also work. However, the Linux x64 path is hardcoded here.
        -->

        <!-- create output directory for the swig proxies -->
        <delete dir="${source.path}/src" quiet="true"/>
        <mkdir dir="${source.path}/src/org/sosy_lab/java_smt/solvers/opensmt/api"/>

        <!-- run swig to generate java files and the c wrapper -->
        <exec executable="swig" dir="${source.path}" failonerror="true">
            <arg value="-java"/>
            <arg value="-c++"/>
            <arg value="-werror"/>
            <arg value="-I${source.installPathLinuxX64}"/>
            <arg value="-package"/>
            <arg value="org.sosy_lab.java_smt.solvers.opensmt.api"/>
            <arg value="-outdir"/>
            <arg value="src/org/sosy_lab/java_smt/solvers/opensmt/api"/>
            <arg value="-o"/>
            <arg value="opensmt-wrap.cpp"/>
            <arg value="swig/opensmt.i"/>
        </exec>

        <!-- Apply the patch to add the license headers -->
        <exec executable="git" failonerror="true">
            <arg value="apply"/>
            <arg value="${source.path}/swigWrapper.patch"/>
        </exec>
    </target>

    <target name="build-opensmt-bindings-jni" depends="build-opensmt-wrapper">
        <!-- compile java proxies and create jar file -->
        <mkdir dir="${source.path}/build"/>
        <javac release="11" srcdir="${source.path}/src/" destdir="${source.path}/build" includeantruntime="false" failonerror="true">
            <include name="org/sosy_lab/java_smt/solvers/opensmt/api/*.java"/>
        </javac>
        <jar destfile="${opensmt.dist.dir}/opensmt-${opensmt.version}.jar" basedir="${source.path}/build"/>

        <!-- generate and package javadoc documentation -->
        <mkdir dir="${source.path}/doc"/>
        <javadoc sourcepath="${source.path}/src" destdir="${source.path}/doc"/>
        <jar destfile="${opensmt.dist.dir}/opensmt-${opensmt.version}-javadoc.jar" basedir="${source.path}/doc"/>

        <!-- package swig generated source code -->
        <jar destfile="${opensmt.dist.dir}/opensmt-${opensmt.version}-sources.jar" basedir="${source.path}/src"/>
    </target>

    <target name="build-opensmt-bindings-linux-x64" depends="build-opensmt-bindings-jni">
        <!-- Dump ${opensmt.version} to a file so that we can use it for the swig wrapper -->
        <echo file="${source.path}/version.h">#define VERSION "${opensmt.version}"</echo>

        <!-- compile the swig wrapper -->
        <exec executable="gcc" dir="${source.path}" failonerror="true">
            <arg value="-fPIC"/>
            <arg value="-std=c++20"/>
            <arg value="-c"/>
            <arg value="opensmt-wrap.cpp"/>
            <arg value="-I${source.installPathLinuxX64}/include"/>
            <arg value="-I${source.installPathLinuxX64}/include/opensmt"/>
            <arg value="-I${java.home}/include"/>
            <arg value="-I${java.home}/include/linux"/>
            <arg value="-I${gmp-linux-x64.path}"/>
        </exec>

        <!-- link the wrapper to create libopensmtj-x64.so -->
        <!-- Licensing:
             GMP is licensed under LGPL:
              - https://www.gnu.org/licenses/lgpl-3.0.html
             OpenSMT is licensed under MIT license:
              - https://github.com/opensmt/opensmt/blob/main/COPYING
             Based on that information, we provide the whole library including its dependencies under the MIT license.
        -->
        <!-- Link the wrapper and create a new lib -->
        <exec executable="gcc" dir="${source.path}" failonerror="true">
            <arg value="-shared"/>
            <arg value="-o"/>
            <arg value="libopensmtj-x64.so"/>
            <arg value="opensmt-wrap.o"/>
            <arg value="-L${source.installPathLinuxX64}/lib"/>
            <arg value="-L${gmp-linux-x64.path}/.libs"/>
            <arg value="-Wl,-Bstatic"/>
            <arg value="-lopensmt"/>
            <arg value="-lgmpxx"/>
            <arg value="-lgmp"/>
            <arg value="-lstdc++"/>
            <arg value="-Wl,-Bdynamic"/>
            <arg value="-lm"/>
            <arg value="-Wl,-z,defs"/>
        </exec>

        <exec executable="strip" dir="${source.path}" failonerror="true">
            <arg value="libopensmtj-x64.so"/>
        </exec>
    </target>

    <target name="build-opensmt-bindings-linux-arm64" depends="build-opensmt-bindings-jni">
        <!-- Dump ${opensmt.version} to a file so that we can use it for the swig wrapper -->
        <echo file="${source.path}/version.h">#define VERSION "${opensmt.version}"</echo>

        <!-- compile the swig wrapper -->
        <exec executable="aarch64-linux-gnu-gcc" dir="${source.path}" failonerror="true">
            <arg value="-fPIC"/>
            <arg value="-std=c++20"/>
            <arg value="-c"/>
            <arg value="opensmt-wrap.cpp"/>
            <arg value="-I${source.installPathLinuxArm64}/include"/>
            <arg value="-I${source.installPathLinuxArm64}/include/opensmt"/>
            <arg value="-I${jdk-linux-arm64.path}/include"/>
            <arg value="-I${jdk-linux-arm64.path}/include/linux"/>
            <arg value="-I${gmp-linux-arm64.path}"/>
        </exec>

        <!-- link the wrapper to create libopensmtj-arm64.so -->
        <!-- Licensing:
             GMP is licensed under LGPL:
              - https://www.gnu.org/licenses/lgpl-3.0.html
             OpenSMT is licensed under MIT license:
              - https://github.com/opensmt/opensmt/blob/main/COPYING
             Based on that information, we provide the whole library including its dependencies under the MIT license.
        -->
        <!-- Link the wrapper and create a new lib -->
        <exec executable="aarch64-linux-gnu-g++" dir="${source.path}" failonerror="true">
            <arg value="-shared"/>
            <arg value="-o"/>
            <arg value="libopensmtj-arm64.so"/>
            <arg value="opensmt-wrap.o"/>
            <arg value="-L${source.installPathLinuxArm64}/lib"/>
            <arg value="-L${gmp-linux-arm64.path}/.libs"/>
            <arg value="-Wl,-Bstatic"/>
            <arg value="-lopensmt"/>
            <arg value="-lgmpxx"/>
            <arg value="-lgmp"/>
            <arg value="-lstdc++"/>
            <arg value="-Wl,-Bdynamic"/>
            <arg value="-lm"/>
            <arg value="-Wl,-z,defs"/>
        </exec>

        <exec executable="aarch64-linux-gnu-strip" dir="${source.path}" failonerror="true">
            <arg value="libopensmtj-arm64.so"/>
        </exec>
    </target>

    <target name="build-opensmt-linux-x64"
            depends="compile-opensmt-linux-x64, build-opensmt-wrapper, build-opensmt-bindings-linux-x64">
    </target>

    <target name="build-opensmt-linux-arm64"
            depends="compile-opensmt-linux-arm64, build-opensmt-wrapper, build-opensmt-bindings-linux-arm64">
    </target>

    <target name="publish-opensmt"
            depends="build-opensmt-linux-x64, build-opensmt-linux-arm64, load-ivy"
            description="Publish OpenSMT binaries to Ivy repository.">
        <!-- copy library files into directory to be published for Ivy -->
        <copy file="${source.path}/libopensmtj-x64.so" tofile="${opensmt.dist.dir}/x64/libopensmtj-${opensmt.version}.so" failonerror="true"/>
        <copy file="${source.path}/libopensmtj-arm64.so" tofile="${opensmt.dist.dir}/arm64/libopensmtj-${opensmt.version}.so" failonerror="true"/>

        <ivy:resolve conf="solver-opensmt" file="solvers_ivy_conf/ivy_opensmt.xml"/>
        <publishToRepository solverName="OpenSMT" solverVersion="${opensmt.version}" distDir="${opensmt.dist.dir}"/>

        <!--
          We additionally provide x64-files without arch-attribute for backwards compatibility,
          such that applications can load dependencies without changing their Ivy configuration.
          Those files are not part of any direct configuration, but will be resolved if the
          arch-attribute is not used.
        -->
        <echo>
            Lets copy the files for architecture x64 into main directory, for backwards compatibility.
            Afterward, please execute the SVN command from above.
        </echo>
        <copy todir="repository/${ivy.organisation}/${ivy.module}/" verbose="true">
            <fileset dir="repository/${ivy.organisation}/${ivy.module}/x64/">
                <include name="*-${opensmt.version}.*"/>
            </fileset>
        </copy>
    </target>
</project>
