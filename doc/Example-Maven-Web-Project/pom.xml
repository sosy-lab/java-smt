<?xml version="1.0" encoding="UTF-8"?>

<!--
This file is part of JavaSMT,
an API wrapper for a collection of SMT solvers:
https://github.com/sosy-lab/java-smt

SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>

SPDX-License-Identifier: Apache-2.0
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.sosy_lab.java_smt_web_example</groupId>
  <artifactId>java-smt-web-example</artifactId>
  <version>1.12</version>
  <packaging>war</packaging>
  <name>java-smt-maven-web-example</name>
  <description>Example Maven project to show how to use JavaSMT with native solver libraries in a web project.</description>
  <url>https://github.com/sosy-lab/java-smt</url>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <organization>
    <name>Software Systems Lab</name>
    <url>https://www.sosy-lab.org/</url>
  </organization>

  <scm>
    <url>https://github.com/sosy-lab/java-smt/</url>
    <connection>scm:git:git://github.com/sosy-lab/java-smt.git</connection>
    <developerConnection>scm:git:git@github.com:sosy-lab/java-smt.git</developerConnection>
  </scm>

  <developers>
    <developer>
      <name>Karlheinz Friedberger</name>
      <email>kfriedberger@gmail.com</email>
      <organization>Software Systems Lab</organization>
      <url>https://www.sosy-lab.org/people/friedberger/</url>
      <roles>
        <role>project maintainer</role>
      </roles>
    </developer>
    <developer>
      <name>Dirk Beyer</name>
      <email>dirk.beyer@sosy-lab.org</email>
      <url>https://www.sosy-lab.org/people/beyer/</url>
      <organization>Software Systems Lab</organization>
      <organizationUrl>http://www.sosy-lab.org/</organizationUrl>
      <roles>
        <role>project manager</role>
      </roles>
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <maven.compiler.release>17</maven.compiler.release>
    <project.dependency.relativepath>dependency</project.dependency.relativepath>
    <project.dependency.path>${project.build.directory}/${project.dependency.relativepath}</project.dependency.path>

    <!-- Some solvers are provided for more than x64, e.g., also for arm64. -->
    <system.arch>x64</system.arch>

    <!-- versions of dependencies -->
    <javasmt.version>5.0.0</javasmt.version>
    <bitwuzla.version>0.7.0-13.1-g595512ae</bitwuzla.version>
    <boolector.version>3.2.2-g1a89c229</boolector.version>
    <cvc4.version>1.8-prerelease-2020-06-24-g7825d8f28</cvc4.version>
    <cvc5.version>1.0.5-g4cb2ab9eb</cvc5.version>
    <mathsat.version>5.6.11-glibc2.27</mathsat.version>
    <opensmt.version>2.8.0-sosy0-ge831bf23</opensmt.version>
    <javasmt-yices.version>4.1.1-734-g3732f7e08</javasmt-yices.version>
    <yices.version>2.6.2-396-g194350c1</yices.version>
    <z3.version>4.13.4</z3.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>java-smt</artifactId>
      <version>${javasmt.version}</version>
    </dependency>

    <!-- MathSAT5 has one dependency (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-mathsat5</artifactId>
      <version>${mathsat.version}</version>
      <classifier>libmathsat5j-${system.arch}</classifier>
      <type>so</type>
    </dependency>

    <!-- Z3 has three dependencies (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-z3</artifactId>
      <version>${z3.version}</version>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-z3</artifactId>
      <version>${z3.version}</version>
      <type>so</type>
      <classifier>libz3-${system.arch}</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-z3</artifactId>
      <version>${z3.version}</version>
      <type>so</type>
      <classifier>libz3java-${system.arch}</classifier>
    </dependency>

    <!-- Bitwuzla has two dependencies (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-bitwuzla</artifactId>
      <version>${bitwuzla.version}</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-bitwuzla</artifactId>
      <version>${bitwuzla.version}</version>
      <type>so</type>
      <classifier>libbitwuzlaj-${system.arch}</classifier>
    </dependency>

    <!-- Boolector has three dependencies (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-boolector</artifactId>
      <version>${boolector.version}</version>
      <type>so</type>
      <classifier>libboolector</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-boolector</artifactId>
      <version>${boolector.version}</version>
      <type>so</type>
      <classifier>libminisat</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-boolector</artifactId>
      <version>${boolector.version}</version>
      <type>so</type>
      <classifier>libpicosat</classifier>
    </dependency>

    <!-- CVC4 has four dependencies (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc4</artifactId>
      <version>${cvc4.version}</version>
      <type>jar</type>
      <classifier>CVC4</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc4</artifactId>
      <version>${cvc4.version}</version>
      <type>so</type>
      <classifier>libcvc4</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc4</artifactId>
      <version>${cvc4.version}</version>
      <type>so</type>
      <classifier>libcvc4jni</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc4</artifactId>
      <version>${cvc4.version}</version>
      <type>so</type>
      <classifier>libcvc4parser</classifier>
    </dependency>

    <!-- CVC5 has six dependencies (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc5</artifactId>
      <version>${cvc5.version}</version>
      <type>jar</type>
      <classifier>cvc5</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc5</artifactId>
      <version>${cvc5.version}</version>
      <type>so</type>
      <classifier>libcvc5</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc5</artifactId>
      <version>${cvc5.version}</version>
      <type>so</type>
      <classifier>libcvc5jni</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc5</artifactId>
      <version>${cvc5.version}</version>
      <type>so</type>
      <classifier>libcvc5parser</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc5</artifactId>
      <version>${cvc5.version}</version>
      <type>so</type>
      <classifier>libpoly</classifier>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-cvc5</artifactId>
      <version>${cvc5.version}</version>
      <type>so</type>
      <classifier>libpolyxx</classifier>
    </dependency>

    <!-- Yices2 has two dependencies (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-yices2</artifactId>
      <version>${javasmt-yices.version}</version> <!-- version of Yices2 bindings in JavaSMT -->
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-yices2</artifactId>
      <version>${yices.version}</version> <!-- version of Yices2 release -->
      <type>so</type>
      <classifier>libyices2j</classifier>
    </dependency>

    <!-- OpenSMT has two dependencies (on Linux) -->
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-opensmt</artifactId>
      <version>${opensmt.version}</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.sosy-lab</groupId>
      <artifactId>javasmt-solver-opensmt</artifactId>
      <version>${opensmt.version}</version>
      <type>so</type>
      <classifier>libopensmtj-${system.arch}</classifier>
    </dependency>

    <!-- JUnit for testing -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>

    <!-- This example is a web-application using javax.servlet. -->
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>6.1.0</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <!-- This step starts its own JVM that ignores system properties set by the user,
               because why would those ever be important?! -->
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.0.0</version>
          <configuration>
            <!-- For solvers with native binaries, you need to add the classpath to test properly.
                 This path needs to be the location of the sosy-lab.commons.jar and the solver binaries.
                 See maven-dependency-plugin below for more information. -->
            <argLine>-Djava.library.path=${project.dependency.path}</argLine>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.4.0</version>
          <configuration>
            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
              </manifest>
            </archive>
            <webResources>
              <resource>
                <directory>target/dependency</directory>
                <includes>
                  <!-- this example includes all solvers -->
                  <include>libmathsat5j.so</include>
                  <include>libz3.so</include>
                  <include>libz3java.so</include>
                  <include>libboolector.so</include>
                  <include>libminisat.so</include>
                  <include>libpicosat.so</include>
                  <include>libcvc4.so</include>
                  <include>libcvc4jni.so</include>
                  <include>libcvc4parser.so</include>
                  <include>libyices2j.so</include>
                  <include>libcvc5.so</include>
                  <include>libcvc5jni.so</include>
                  <include>libcvc5parser.so</include>
                  <include>libpoly.so</include>
                  <include>libpolyxx.so</include>
                  <include>libyices2j.so</include>
                  <include>libopensmtj.so</include>
                </includes>
                <targetPath>WEB-INF/lib</targetPath>
              </resource>
            </webResources>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.4.0</version>
          <configuration>
            <archive>
              <manifest>
                <!-- For solvers with native binaries, you need to add the classpath to test properly.
                     This path needs to be the location of the sosy-lab.commons.jar and the solver binaries.
                     See maven-dependency-plugin below for more information. -->
                <addClasspath>true</addClasspath>
                <classpathPrefix>${project.dependency.relativepath}</classpathPrefix>
                <mainClass>org.sosy_lab.SolverOverviewServlet</mainClass>
              </manifest>
            </archive>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <!-- The dependency plugin allows us to copy or delete files. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <!-- The goal "copy" is used to change the name of the solver libraries (i.e. Z3)
                 from the name that is used internally in Maven to the normal name. -->
            <id>copy</id>
            <phase>initialize</phase>
            <goals>
              <goal>copy</goal>
            </goals>
          </execution>
          <execution>
            <!-- This copies all dependencies to ${project.dependency.path}. -->
            <!-- We do this, because the sosy-lab.commons dependency (in JavaSMT) searches the
                 native solver binaries (i.e. MathSAT or Z3) at specific locations and with specific names.
                 So we just copy the dependencies and set the classpath to this location.
                 You may of course change this if you know how to.
                 Default search locations for sosy-lab.commons:
                 (1) in its own folder (by far the easiest, just copy everything together) or
                 (2) in the "native library path" as returned by getNativeLibraryPath() in Java,
                 which is the directory ../native/<arch>-<os>/ relative to the JAR file of sosy-lab.commons,
                 with the following values depending on your system (arch=x86_64|x86; os=linux|windows|macosx). -->
            <id>copy-dependencies</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <outputDirectory>${project.dependency.path}</outputDirectory>

          <artifactItems>
            <!-- Here we specify what we want to use for the goal "copy".
                 In our case we copy the solver dependencies (binaries) to change their names.
                 groupId/artifactId/version/type/classifier have to match the dependency!
                 We copy them to ${project.dependency.path} as this is the location
                 that copy-dependencies uses by default. destFileName specifies the final name.
                 You may only need some of the artifacts below, depending on what solver(s) you want.
                 Important: you NEED to set the classpath to ${project.dependency.path} or
                 wherever you have your sosy-lab.commons + solver binaries!   -->

            <!-- MathSAT5 has one native library -->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-mathsat5</artifactId>
              <type>so</type>
              <classifier>libmathsat5j-${system.arch}</classifier>
              <destFileName>libmathsat5j.so</destFileName>
            </artifactItem>

            <!-- Z3 has two native libraries -->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-z3</artifactId>
              <type>so</type>
              <classifier>libz3java-${system.arch}</classifier>
              <destFileName>libz3java.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-z3</artifactId>
              <type>so</type>
              <classifier>libz3-${system.arch}</classifier>
              <destFileName>libz3.so</destFileName>
            </artifactItem>

            <!-- Bitwuzla has one dependency (on Linux) -->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-bitwuzla</artifactId>
              <type>so</type>
              <classifier>libbitwuzlaj-${system.arch}</classifier>
              <destFileName>libbitwuzlaj.so</destFileName>
            </artifactItem>

            <!-- Boolector has three dependencies (on Linux) -->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-boolector</artifactId>
              <type>so</type>
              <classifier>libboolector</classifier>
              <destFileName>libboolector.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-boolector</artifactId>
              <type>so</type>
              <classifier>libminisat</classifier>
              <destFileName>libminisat.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-boolector</artifactId>
              <type>so</type>
              <classifier>libpicosat</classifier>
              <destFileName>libpicosat.so</destFileName>
            </artifactItem>

            <!-- CVC4 has four dependencies (on Linux),
                 and renaming the JAR file is not required -->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc4</artifactId>
              <type>so</type>
              <classifier>libcvc4</classifier>
              <destFileName>libcvc4.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc4</artifactId>
              <type>so</type>
              <classifier>libcvc4jni</classifier>
              <destFileName>libcvc4jni.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc4</artifactId>
              <type>so</type>
              <classifier>libcvc4parser</classifier>
              <destFileName>libcvc4parser.so</destFileName>
            </artifactItem>

            <!-- CVC5 has six dependencies (on Linux),
                 and renaming the JAR file is not required -->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc5</artifactId>
              <type>so</type>
              <classifier>libcvc5</classifier>
              <destFileName>libcvc5.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc5</artifactId>
              <type>so</type>
              <classifier>libcvc5jni</classifier>
              <destFileName>libcvc5jni.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc5</artifactId>
              <type>so</type>
              <classifier>libcvc5parser</classifier>
              <destFileName>libcvc5parser.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc5</artifactId>
              <type>so</type>
              <classifier>libpoly</classifier>
              <destFileName>libpoly.so</destFileName>
            </artifactItem>
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-cvc5</artifactId>
              <type>so</type>
              <classifier>libpolyxx</classifier>
              <destFileName>libpolyxx.so</destFileName>
            </artifactItem>

            <!-- Yices2 has two dependencies (on Linux),
                 and renaming the JAR file is not required to be copied.-->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-yices2</artifactId>
              <type>so</type>
              <classifier>libyices2j</classifier>
              <destFileName>libyices2j.so</destFileName>
            </artifactItem>

            <!-- OpenSMT has two dependencies (on Linux),
                 and renaming the JAR file is not required to be copied.-->
            <artifactItem>
              <groupId>org.sosy-lab</groupId>
              <artifactId>javasmt-solver-opensmt</artifactId>
              <type>so</type>
              <classifier>libopensmtj-${system.arch}</classifier>
              <destFileName>libopensmtj.so</destFileName>
            </artifactItem>
          </artifactItems>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
