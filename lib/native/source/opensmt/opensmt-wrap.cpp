// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "version.h"
#include <api/Opensmt.h>

using namespace opensmt;


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(jint count,int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< int >(static_cast<std::vector< int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int_Sg__doSize(std::vector< int > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_0(std::vector< int > *self,std::vector< int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_1(std::vector< int > *self,jint index,std::vector< int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doRemove(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__doGet(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doSet(std::vector< int > *self,jint index,std::vector< int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sg__doRemoveRange(std::vector< int > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::PTRef > *new_std_vector_Sl_opensmt_PTRef_Sg___SWIG_2(jint count,opensmt::PTRef const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< opensmt::PTRef >(static_cast<std::vector< opensmt::PTRef >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_opensmt_PTRef_Sg__doSize(std::vector< opensmt::PTRef > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_opensmt_PTRef_Sg__doAdd__SWIG_0(std::vector< opensmt::PTRef > *self,std::vector< opensmt::PTRef >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_opensmt_PTRef_Sg__doAdd__SWIG_1(std::vector< opensmt::PTRef > *self,jint index,std::vector< opensmt::PTRef >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::PTRef >::value_type std_vector_Sl_opensmt_PTRef_Sg__doRemove(std::vector< opensmt::PTRef > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          opensmt::PTRef const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::PTRef >::value_type const &std_vector_Sl_opensmt_PTRef_Sg__doGet(std::vector< opensmt::PTRef > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< opensmt::PTRef >::value_type std_vector_Sl_opensmt_PTRef_Sg__doSet(std::vector< opensmt::PTRef > *self,jint index,std::vector< opensmt::PTRef >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          opensmt::PTRef const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_opensmt_PTRef_Sg__doRemoveRange(std::vector< opensmt::PTRef > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::SRef > *new_std_vector_Sl_opensmt_SRef_Sg___SWIG_2(jint count,opensmt::SRef const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< opensmt::SRef >(static_cast<std::vector< opensmt::SRef >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_opensmt_SRef_Sg__doSize(std::vector< opensmt::SRef > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_opensmt_SRef_Sg__doAdd__SWIG_0(std::vector< opensmt::SRef > *self,std::vector< opensmt::SRef >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_opensmt_SRef_Sg__doAdd__SWIG_1(std::vector< opensmt::SRef > *self,jint index,std::vector< opensmt::SRef >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::SRef >::value_type std_vector_Sl_opensmt_SRef_Sg__doRemove(std::vector< opensmt::SRef > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          opensmt::SRef const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::SRef >::value_type const &std_vector_Sl_opensmt_SRef_Sg__doGet(std::vector< opensmt::SRef > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< opensmt::SRef >::value_type std_vector_Sl_opensmt_SRef_Sg__doSet(std::vector< opensmt::SRef > *self,jint index,std::vector< opensmt::SRef >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          opensmt::SRef const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_opensmt_SRef_Sg__doRemoveRange(std::vector< opensmt::SRef > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::SymRef > *new_std_vector_Sl_opensmt_SymRef_Sg___SWIG_2(jint count,opensmt::SymRef const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< opensmt::SymRef >(static_cast<std::vector< opensmt::SymRef >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_opensmt_SymRef_Sg__doSize(std::vector< opensmt::SymRef > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_opensmt_SymRef_Sg__doAdd__SWIG_0(std::vector< opensmt::SymRef > *self,std::vector< opensmt::SymRef >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_opensmt_SymRef_Sg__doAdd__SWIG_1(std::vector< opensmt::SymRef > *self,jint index,std::vector< opensmt::SymRef >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::SymRef >::value_type std_vector_Sl_opensmt_SymRef_Sg__doRemove(std::vector< opensmt::SymRef > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          opensmt::SymRef const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< opensmt::SymRef >::value_type const &std_vector_Sl_opensmt_SymRef_Sg__doGet(std::vector< opensmt::SymRef > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< opensmt::SymRef >::value_type std_vector_Sl_opensmt_SymRef_Sg__doSet(std::vector< opensmt::SymRef > *self,jint index,std::vector< opensmt::SymRef >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          opensmt::SymRef const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_opensmt_SymRef_Sg__doRemoveRange(std::vector< opensmt::SymRef > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< int > > *new_std_vector_Sl_std_vector_Sl_int_Sg__Sg___SWIG_2(jint count,std::vector< int > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::vector< int > >(static_cast<std::vector< std::vector< int > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_vector_Sl_int_Sg__Sg__doSize(std::vector< std::vector< int > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__doAdd__SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__doAdd__SWIG_1(std::vector< std::vector< int > > *self,jint index,std::vector< std::vector< int > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__doRemove(std::vector< std::vector< int > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::vector< int > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg__doGet(std::vector< std::vector< int > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__doSet(std::vector< std::vector< int > > *self,jint index,std::vector< std::vector< int > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::vector< int > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__doRemoveRange(std::vector< std::vector< int > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN unsigned int opensmt_SortSymbol_getArity(opensmt::SortSymbol *self){
    return self->arity;
  }
SWIGINTERN std::string opensmt_SortSymbol_getName(opensmt::SortSymbol *self){
    return self->name;
  }
SWIGINTERN std::vector< opensmt::SRef > opensmt_Sort_getArgs(opensmt::Sort *self){
    std::vector<SRef> args;
    for(auto i=0; i<self->getSize(); i++)
      args.emplace_back(self->operator[](i));
    return args;
  }
SWIGINTERN std::vector< opensmt::SRef > opensmt_Symbol_getArgTypes(opensmt::Symbol *self){
    std::vector<SRef> args;
    for(auto i=0; i<self->nargs(); i++)
      args.emplace_back(self->operator[](i));
    return args;
  }
SWIGINTERN opensmt::PTRef opensmt_InterpolationContext_getSingleInterpolant(opensmt::InterpolationContext *self,std::vector< int > const &partition){
    std::vector<PTRef> interpolants;
    ipartitions_t mask;
    for(int i : partition)
      opensmt::setbit(mask, i);
    self->getSingleInterpolant(interpolants, mask);
    return interpolants[0];
  }
SWIGINTERN std::vector< opensmt::PTRef > opensmt_InterpolationContext_getPathInterpolants(opensmt::InterpolationContext *self,std::vector< std::vector< int > > const &partitions){
    vec<PTRef> interpolants;
    std::vector<ipartitions_t> masks;
    for(const std::vector<int>& partition : partitions) {
      ipartitions_t mask;
      for (int i : partition)
        opensmt::setbit(mask, i);
      masks.emplace_back(mask);
    }
    self->getPathInterpolants(interpolants, masks);
    std::vector<PTRef> result;
    for (int i = 0; i < interpolants.size(); i++)
      result.emplace_back(interpolants[i]);
    return result;
 }
SWIGINTERN std::string opensmt_LogicFactory_getVersion(){
    return std::string(VERSION);
  }
SWIGINTERN opensmt::SMTOption *new_opensmt_SMTOption__SWIG_3(bool b){
    return new SMTOption(b);
  }

#include <string.h>


#include <memory>

SWIGINTERN void opensmt_SMTConfig_setOption(opensmt::SMTConfig *self,char const *option,opensmt::SMTOption &value){
    const char* msg;
    bool ok = self->setOption(option, value, msg);
    if (!ok) {
      throw std::runtime_error(msg);
    }
  }
SWIGINTERN opensmt::TemplateFunction *new_opensmt_TemplateFunction(std::string const &name,std::vector< opensmt::PTRef > const &args_,opensmt::SRef ret_sort,opensmt::PTRef tr_body){
    return new TemplateFunction(name, vec(args_), ret_sort, tr_body);
  }
SWIGINTERN std::vector< opensmt::PTRef > opensmt_TemplateFunction_getArgs(opensmt::TemplateFunction *self){
    std::vector<PTRef> res;
    for(PTRef a : self->getArgs()) {
      res.emplace_back(a);
    }
    return res;
  }
SWIGINTERN opensmt::PTRef opensmt_Pterm_at(opensmt::Pterm *self,int i){
    return self->operator[](i);
  }
SWIGINTERN opensmt::sstat opensmt_sstat_True(){ return s_True; }
SWIGINTERN opensmt::sstat opensmt_sstat_False(){ return s_False; }
SWIGINTERN opensmt::sstat opensmt_sstat_Undef(){ return s_Undef; }
SWIGINTERN opensmt::sstat opensmt_sstat_Error(){ return s_Error; }
SWIGINTERN std::vector< opensmt::PTRef > opensmt_MainSolver_getUnsatCore(opensmt::MainSolver *self){
    std::vector<PTRef> result;
    auto core = self->getUnsatCore();
    for (PTRef r : core->getTerms()) {
      result.emplace_back(r);
    }
    return result;
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkStore(opensmt::Logic *self,opensmt::PTRef array,opensmt::PTRef index,opensmt::PTRef value){
    return self->mkStore({array, index, value});
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkSelect(opensmt::Logic *self,opensmt::PTRef array,opensmt::PTRef index){
    return self->mkSelect({array, index});
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_getDefaultValue(opensmt::Logic *self,opensmt::SRef sref){
    return self->getDefaultValuePTRef(sref);
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkUninterpFun(opensmt::Logic *self,opensmt::SymRef f,std::vector< opensmt::PTRef > const &args){
    return self->mkUninterpFun(f, vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkAnd__SWIG_1(opensmt::Logic *self,std::vector< opensmt::PTRef > const &args){
    return self->mkAnd(vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkOr__SWIG_1(opensmt::Logic *self,std::vector< opensmt::PTRef > const &args){
    return self->mkOr(vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkImpl__SWIG_1(opensmt::Logic *self,std::vector< opensmt::PTRef > const &args){
    return self->mkImpl(vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkEq__SWIG_1(opensmt::Logic *self,std::vector< opensmt::PTRef > const &args){
    return self->mkEq(vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkDistinct__SWIG_0(opensmt::Logic *self,std::vector< opensmt::PTRef > const &args){
    return self->mkDistinct(vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_mkDistinct__SWIG_1(opensmt::Logic *self,opensmt::PTRef a,opensmt::PTRef b){
    std::vector<PTRef> args;
    args.emplace_back(a);
    args.emplace_back(b);
    return self->mkDistinct(args);
  }
SWIGINTERN opensmt::SymRef opensmt_Logic_declareFun(opensmt::Logic *self,std::string const &fname,opensmt::SRef rsort,std::vector< opensmt::SRef > const &args){
    return self->declareFun (fname, rsort, vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_instantiateFunctionTemplate(opensmt::Logic *self,opensmt::TemplateFunction const &tmplt,std::vector< opensmt::PTRef > const &args){
    return self->instantiateFunctionTemplate(tmplt, vec(args));
  }
SWIGINTERN bool opensmt_Logic_isSortBool(opensmt::Logic *self,opensmt::SRef sort){
    SRef sortBool = self->getSort_bool();
    return sort == sortBool;
  }
SWIGINTERN opensmt::PTRef opensmt_Logic_insertTerm(opensmt::Logic *self,opensmt::SymRef sym,std::vector< opensmt::PTRef > const &args){
    return self->insertTerm(sym, vec(args));
  }
SWIGINTERN opensmt::PTRef opensmt_ArithLogic_mkIntConst(opensmt::ArithLogic *self,std::string const &c){
    return self->mkIntConst(FastRational(c.c_str()));
  }
SWIGINTERN opensmt::PTRef opensmt_ArithLogic_mkRealConst(opensmt::ArithLogic *self,std::string const &c){
    return self->mkRealConst(FastRational(c.c_str()));
  }
SWIGINTERN std::string opensmt_ArithLogic_getNumConst(opensmt::ArithLogic *self,opensmt::PTRef tr){
    const FastRational& rat = self->getNumConst(tr);
    return rat.get_str();
  }
SWIGINTERN bool opensmt_ArithLogic_isMinus(opensmt::ArithLogic const *self,opensmt::PTRef tr){
    return self->isMinus(self->getPterm(tr).symb());
  }
SWIGINTERN bool opensmt_ArithLogic_isDiv(opensmt::ArithLogic const *self,opensmt::PTRef tr){
    return self->isIntDiv(tr) || self->isRealDiv(tr);
  }
SWIGINTERN bool opensmt_ArithLogic_isMod(opensmt::ArithLogic const *self,opensmt::PTRef tr){
    return self->isMod(self->getPterm(tr).symb());
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  try {
    result = std_vector_Sl_int_Sg__doSize((std::vector< int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_int_Sg__doAdd__SWIG_0(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorInt_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_int_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1VectorInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorPTRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< opensmt::PTRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< opensmt::PTRef > *)new std::vector< opensmt::PTRef >();
  *(std::vector< opensmt::PTRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorPTRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< opensmt::PTRef > *arg1 = 0 ;
  std::vector< opensmt::PTRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  result = (std::vector< opensmt::PTRef > *)new std::vector< opensmt::PTRef >((std::vector< opensmt::PTRef > const &)*arg1);
  *(std::vector< opensmt::PTRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  std::vector< opensmt::PTRef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  result = ((std::vector< opensmt::PTRef > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  std::vector< opensmt::PTRef >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  arg2 = (std::vector< opensmt::PTRef >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  result = (bool)((std::vector< opensmt::PTRef > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorPTRef_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  opensmt::PTRef *arg2 = 0 ;
  std::vector< opensmt::PTRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(opensmt::PTRef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::PTRef const & is null");
    return 0;
  } 
  try {
    result = (std::vector< opensmt::PTRef > *)new_std_vector_Sl_opensmt_PTRef_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(opensmt::PTRef const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::PTRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  try {
    result = std_vector_Sl_opensmt_PTRef_Sg__doSize((std::vector< opensmt::PTRef > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  std::vector< opensmt::PTRef >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  arg2 = *(std::vector< opensmt::PTRef >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_opensmt_PTRef_Sg__doAdd__SWIG_0(arg1,(opensmt::PTRef const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::PTRef >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< opensmt::PTRef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_opensmt_PTRef_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(opensmt::PTRef const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::PTRef >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_opensmt_PTRef_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::PTRef >::value_type **)&jresult = new std::vector< opensmt::PTRef >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::PTRef >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< opensmt::PTRef >::value_type *) &std_vector_Sl_opensmt_PTRef_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::PTRef >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::PTRef >::value_type *arg3 = 0 ;
  std::vector< opensmt::PTRef >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< opensmt::PTRef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_opensmt_PTRef_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(opensmt::PTRef const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::PTRef >::value_type **)&jresult = new std::vector< opensmt::PTRef >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorPTRef_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_opensmt_PTRef_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1VectorPTRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< opensmt::PTRef > *arg1 = (std::vector< opensmt::PTRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< opensmt::PTRef > **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorSRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< opensmt::SRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< opensmt::SRef > *)new std::vector< opensmt::SRef >();
  *(std::vector< opensmt::SRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorSRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< opensmt::SRef > *arg1 = 0 ;
  std::vector< opensmt::SRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SRef > const & is null");
    return 0;
  } 
  result = (std::vector< opensmt::SRef > *)new std::vector< opensmt::SRef >((std::vector< opensmt::SRef > const &)*arg1);
  *(std::vector< opensmt::SRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  std::vector< opensmt::SRef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  result = ((std::vector< opensmt::SRef > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  std::vector< opensmt::SRef >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  arg2 = (std::vector< opensmt::SRef >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  result = (bool)((std::vector< opensmt::SRef > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorSRef_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  opensmt::SRef *arg2 = 0 ;
  std::vector< opensmt::SRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(opensmt::SRef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::SRef const & is null");
    return 0;
  } 
  try {
    result = (std::vector< opensmt::SRef > *)new_std_vector_Sl_opensmt_SRef_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(opensmt::SRef const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  try {
    result = std_vector_Sl_opensmt_SRef_Sg__doSize((std::vector< opensmt::SRef > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  std::vector< opensmt::SRef >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  arg2 = *(std::vector< opensmt::SRef >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SRef >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_opensmt_SRef_Sg__doAdd__SWIG_0(arg1,(opensmt::SRef const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SRef >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< opensmt::SRef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SRef >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_opensmt_SRef_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(opensmt::SRef const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SRef >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_opensmt_SRef_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SRef >::value_type **)&jresult = new std::vector< opensmt::SRef >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SRef >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< opensmt::SRef >::value_type *) &std_vector_Sl_opensmt_SRef_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SRef >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SRef >::value_type *arg3 = 0 ;
  std::vector< opensmt::SRef >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< opensmt::SRef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SRef >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_opensmt_SRef_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(opensmt::SRef const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SRef >::value_type **)&jresult = new std::vector< opensmt::SRef >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSRef_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_opensmt_SRef_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1VectorSRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< opensmt::SRef > *arg1 = (std::vector< opensmt::SRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< opensmt::SRef > **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorSymRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< opensmt::SymRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< opensmt::SymRef > *)new std::vector< opensmt::SymRef >();
  *(std::vector< opensmt::SymRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorSymRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< opensmt::SymRef > *arg1 = 0 ;
  std::vector< opensmt::SymRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SymRef > const & is null");
    return 0;
  } 
  result = (std::vector< opensmt::SymRef > *)new std::vector< opensmt::SymRef >((std::vector< opensmt::SymRef > const &)*arg1);
  *(std::vector< opensmt::SymRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  std::vector< opensmt::SymRef >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  result = ((std::vector< opensmt::SymRef > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  std::vector< opensmt::SymRef >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  arg2 = (std::vector< opensmt::SymRef >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  result = (bool)((std::vector< opensmt::SymRef > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorSymRef_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  opensmt::SymRef *arg2 = 0 ;
  std::vector< opensmt::SymRef > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(opensmt::SymRef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::SymRef const & is null");
    return 0;
  } 
  try {
    result = (std::vector< opensmt::SymRef > *)new_std_vector_Sl_opensmt_SymRef_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(opensmt::SymRef const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SymRef > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  try {
    result = std_vector_Sl_opensmt_SymRef_Sg__doSize((std::vector< opensmt::SymRef > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  std::vector< opensmt::SymRef >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  arg2 = *(std::vector< opensmt::SymRef >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SymRef >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_opensmt_SymRef_Sg__doAdd__SWIG_0(arg1,(opensmt::SymRef const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SymRef >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< opensmt::SymRef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SymRef >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_opensmt_SymRef_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(opensmt::SymRef const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SymRef >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_opensmt_SymRef_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SymRef >::value_type **)&jresult = new std::vector< opensmt::SymRef >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SymRef >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< opensmt::SymRef >::value_type *) &std_vector_Sl_opensmt_SymRef_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SymRef >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  jint arg2 ;
  std::vector< opensmt::SymRef >::value_type *arg3 = 0 ;
  std::vector< opensmt::SymRef >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< opensmt::SymRef >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SymRef >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_opensmt_SymRef_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(opensmt::SymRef const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< opensmt::SymRef >::value_type **)&jresult = new std::vector< opensmt::SymRef >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorSymRef_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_opensmt_SymRef_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1VectorSymRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< opensmt::SymRef > *arg1 = (std::vector< opensmt::SymRef > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< opensmt::SymRef > **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorVectorInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  *(std::vector< std::vector< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorVectorInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< int > > *arg1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > const & is null");
    return 0;
  } 
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int > > const &)*arg1);
  *(std::vector< std::vector< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  arg2 = (std::vector< std::vector< int > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1VectorVectorInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return 0;
  } 
  try {
    result = (std::vector< std::vector< int > > *)new_std_vector_Sl_std_vector_Sl_int_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::vector< int > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__doSize((std::vector< std::vector< int > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__doAdd__SWIG_0(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< int > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< int > >::value_type **)&jresult = new std::vector< std::vector< int > >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  std::vector< std::vector< int > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< int > >::value_type **)&jresult = new std::vector< std::vector< int > >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_VectorVectorInt_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1VectorVectorInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< int > > **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_PTRef_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  opensmt::PTRef *arg1 = (opensmt::PTRef *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::PTRef **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_PTRef_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::PTRef *arg1 = (opensmt::PTRef *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::PTRef **)&jarg1; 
  result = (uint32_t) ((arg1)->x);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_PTRef_1Undef_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::PTRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (opensmt::PTRef *)&opensmt::PTRef::Undef;
  *(opensmt::PTRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1PTRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::PTRef *arg1 = (opensmt::PTRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::PTRef **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SSymRef_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  opensmt::SSymRef *arg1 = (opensmt::SSymRef *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SSymRef **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SSymRef_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::SSymRef *arg1 = (opensmt::SSymRef *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SSymRef **)&jarg1; 
  result = (uint32_t) ((arg1)->x);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1SSymRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::SSymRef *arg1 = (opensmt::SSymRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::SSymRef **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SortSymbol_1isInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::SortSymbol *arg1 = (opensmt::SortSymbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SortSymbol **)&jarg1; 
  {
    try {
      result = (bool)((opensmt::SortSymbol const *)arg1)->isInternal(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SortSymbol_1getArity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::SortSymbol *arg1 = (opensmt::SortSymbol *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SortSymbol **)&jarg1; 
  {
    try {
      result = (unsigned int)opensmt_SortSymbol_getArity(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SortSymbol_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  opensmt::SortSymbol *arg1 = (opensmt::SortSymbol *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SortSymbol **)&jarg1; 
  {
    try {
      result = opensmt_SortSymbol_getName(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1SortSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::SortSymbol *arg1 = (opensmt::SortSymbol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::SortSymbol **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SRef_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  opensmt::SRef *arg1 = (opensmt::SRef *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SRef **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SRef_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::SRef *arg1 = (opensmt::SRef *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SRef **)&jarg1; 
  result = (uint32_t) ((arg1)->x);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1SRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::SRef *arg1 = (opensmt::SRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::SRef **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Sort_1getSymRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Sort *arg1 = (opensmt::Sort *) 0 ;
  opensmt::SSymRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Sort **)&jarg1; 
  {
    try {
      result = ((opensmt::Sort const *)arg1)->getSymRef(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SSymRef **)&jresult = new opensmt::SSymRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Sort_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Sort *arg1 = (opensmt::Sort *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Sort **)&jarg1; 
  {
    try {
      result = (uint32_t)((opensmt::Sort const *)arg1)->getSize(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Sort_1getArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Sort *arg1 = (opensmt::Sort *) 0 ;
  std::vector< opensmt::SRef > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Sort **)&jarg1; 
  {
    try {
      result = opensmt_Sort_getArgs(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(std::vector< opensmt::SRef > **)&jresult = new std::vector< opensmt::SRef >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1Sort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::Sort *arg1 = (opensmt::Sort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::Sort **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Symbol_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  opensmt::Symbol *arg1 = (opensmt::Symbol *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Symbol **)&jarg1; 
  {
    try {
      result = (int)((opensmt::Symbol const *)arg1)->size(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Symbol_1rsort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Symbol *arg1 = (opensmt::Symbol *) 0 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Symbol **)&jarg1; 
  {
    try {
      result = ((opensmt::Symbol const *)arg1)->rsort(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Symbol_1isInterpreted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::Symbol *arg1 = (opensmt::Symbol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Symbol **)&jarg1; 
  {
    try {
      result = (bool)((opensmt::Symbol const *)arg1)->isInterpreted(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Symbol_1getArgTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Symbol *arg1 = (opensmt::Symbol *) 0 ;
  std::vector< opensmt::SRef > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Symbol **)&jarg1; 
  {
    try {
      result = opensmt_Symbol_getArgTypes(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(std::vector< opensmt::SRef > **)&jresult = new std::vector< opensmt::SRef >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1Symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::Symbol *arg1 = (opensmt::Symbol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::Symbol **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SymRef_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  opensmt::SymRef *arg1 = (opensmt::SymRef *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SymRef **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SymRef_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::SymRef *arg1 = (opensmt::SymRef *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SymRef **)&jarg1; 
  result = (uint32_t) ((arg1)->x);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1SymRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::SymRef *arg1 = (opensmt::SymRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::SymRef **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1InterpolationContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::InterpolationContext *arg1 = (opensmt::InterpolationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::InterpolationContext **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_InterpolationContext_1getSingleInterpolant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::InterpolationContext *arg1 = (opensmt::InterpolationContext *) 0 ;
  std::vector< int > *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::InterpolationContext **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_InterpolationContext_getSingleInterpolant(arg1,(std::vector< int > const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_InterpolationContext_1getPathInterpolants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::InterpolationContext *arg1 = (opensmt::InterpolationContext *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  std::vector< opensmt::PTRef > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::InterpolationContext **)&jarg1; 
  arg2 = *(std::vector< std::vector< int > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_InterpolationContext_getPathInterpolants(arg1,(std::vector< std::vector< int > > const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(std::vector< opensmt::PTRef > **)&jresult = new std::vector< opensmt::PTRef >(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_getLogicFromString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  opensmt::Logic_t result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string_view **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string_view");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (opensmt::Logic_t)opensmt::getLogicFromString(SWIG_STD_MOVE(arg1)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_LogicFactory_1getInstance(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  opensmt::Logic_t arg1 ;
  opensmt::Logic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (opensmt::Logic_t)jarg1; 
  {
    try {
      result = (opensmt::Logic *)opensmt::LogicFactory::getInstance(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::Logic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_LogicFactory_1getLAInstance(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  opensmt::Logic_t arg1 ;
  opensmt::ArithLogic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (opensmt::Logic_t)jarg1; 
  {
    try {
      result = (opensmt::ArithLogic *)opensmt::LogicFactory::getLAInstance(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::ArithLogic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_LogicFactory_1getLRAInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (opensmt::ArithLogic *)opensmt::LogicFactory::getLRAInstance(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::ArithLogic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_LogicFactory_1getLIAInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (opensmt::ArithLogic *)opensmt::LogicFactory::getLIAInstance(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::ArithLogic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_LogicFactory_1getVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = opensmt_LogicFactory_getVersion(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1LogicFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::LogicFactory *arg1 = (opensmt::LogicFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::LogicFactory **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1SMTOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  opensmt::SMTOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (opensmt::SMTOption *)new opensmt::SMTOption(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SMTOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1SMTOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  opensmt::SMTOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (opensmt::SMTOption *)new opensmt::SMTOption(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SMTOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1SMTOption_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  opensmt::SMTOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (opensmt::SMTOption *)new opensmt::SMTOption((char const *)arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SMTOption **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTOption_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::SMTOption *arg1 = (opensmt::SMTOption *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTOption **)&jarg1; 
  {
    try {
      result = (bool)((opensmt::SMTOption const *)arg1)->isEmpty(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTOption_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  opensmt::SMTOption *arg1 = (opensmt::SMTOption *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTOption **)&jarg1; 
  {
    try {
      result = ((opensmt::SMTOption const *)arg1)->toString(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1SMTOption_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  opensmt::SMTOption *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = (opensmt::SMTOption *)new_opensmt_SMTOption__SWIG_3(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SMTOption **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1SMTOption(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::SMTOption *arg1 = (opensmt::SMTOption *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::SMTOption **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1o_1produce_1unsat_1cores_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      opensmt::SMTConfig::o_produce_unsat_cores = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)opensmt::SMTConfig::o_produce_unsat_cores, (const char *)arg1);
    } else {
      opensmt::SMTConfig::o_produce_unsat_cores = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1o_1produce_1unsat_1cores_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)opensmt::SMTConfig::o_produce_unsat_cores;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1o_1minimal_1unsat_1cores_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      opensmt::SMTConfig::o_minimal_unsat_cores = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)opensmt::SMTConfig::o_minimal_unsat_cores, (const char *)arg1);
    } else {
      opensmt::SMTConfig::o_minimal_unsat_cores = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1o_1minimal_1unsat_1cores_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)opensmt::SMTConfig::o_minimal_unsat_cores;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1o_1print_1cores_1full_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      opensmt::SMTConfig::o_print_cores_full = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)opensmt::SMTConfig::o_print_cores_full, (const char *)arg1);
    } else {
      opensmt::SMTConfig::o_print_cores_full = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1o_1print_1cores_1full_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)opensmt::SMTConfig::o_print_cores_full;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1SMTConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::SMTConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (opensmt::SMTConfig *)new opensmt::SMTConfig(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SMTConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1SMTConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::SMTConfig *arg1 = (opensmt::SMTConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::SMTConfig **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1SMTConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::SMTConfig *arg1 = 0 ;
  std::unique_ptr< opensmt::SMTConfig > rvrdeleter1 ;
  opensmt::SMTConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTConfig **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::SMTConfig && is null");
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  {
    try {
      result = (opensmt::SMTConfig *)new opensmt::SMTConfig((opensmt::SMTConfig &&)*arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SMTConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1setProduceProofs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  opensmt::SMTConfig *arg1 = (opensmt::SMTConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTConfig **)&jarg1; 
  {
    try {
      (arg1)->setProduceProofs(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1produce_1unsat_1cores(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::SMTConfig *arg1 = (opensmt::SMTConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTConfig **)&jarg1; 
  {
    try {
      result = (bool)((opensmt::SMTConfig const *)arg1)->produce_unsat_cores(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1minimal_1unsat_1cores(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::SMTConfig *arg1 = (opensmt::SMTConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTConfig **)&jarg1; 
  {
    try {
      result = (bool)((opensmt::SMTConfig const *)arg1)->minimal_unsat_cores(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1print_1cores_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::SMTConfig *arg1 = (opensmt::SMTConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTConfig **)&jarg1; 
  {
    try {
      result = (bool)((opensmt::SMTConfig const *)arg1)->print_cores_full(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1produce_1proof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::SMTConfig *arg1 = (opensmt::SMTConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::SMTConfig **)&jarg1; 
  {
    try {
      result = (bool)((opensmt::SMTConfig const *)arg1)->produce_proof(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_SMTConfig_1setOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  opensmt::SMTConfig *arg1 = (opensmt::SMTConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  opensmt::SMTOption *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(opensmt::SMTConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(opensmt::SMTOption **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::SMTOption & is null");
    return ;
  } 
  {
    try {
      opensmt_SMTConfig_setOption(arg1,(char const *)arg2,*arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_TemplateFunction_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  opensmt::TemplateFunction *arg1 = (opensmt::TemplateFunction *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::TemplateFunction **)&jarg1; 
  {
    try {
      result = ((opensmt::TemplateFunction const *)arg1)->getName(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_TemplateFunction_1getRetSort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::TemplateFunction *arg1 = (opensmt::TemplateFunction *) 0 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::TemplateFunction **)&jarg1; 
  {
    try {
      result = ((opensmt::TemplateFunction const *)arg1)->getRetSort(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_TemplateFunction_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::TemplateFunction *arg1 = (opensmt::TemplateFunction *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::TemplateFunction **)&jarg1; 
  {
    try {
      result = ((opensmt::TemplateFunction const *)arg1)->getBody(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1TemplateFunction(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< opensmt::PTRef > *arg2 = 0 ;
  opensmt::SRef arg3 ;
  opensmt::PTRef arg4 ;
  opensmt::SRef *argp3 ;
  opensmt::PTRef *argp4 ;
  opensmt::TemplateFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< opensmt::PTRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  argp3 = *(opensmt::SRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(opensmt::PTRef **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (opensmt::TemplateFunction *)new_opensmt_TemplateFunction((std::string const &)*arg1,(std::vector< opensmt::PTRef > const &)*arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::TemplateFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_TemplateFunction_1getArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::TemplateFunction *arg1 = (opensmt::TemplateFunction *) 0 ;
  std::vector< opensmt::PTRef > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::TemplateFunction **)&jarg1; 
  {
    try {
      result = opensmt_TemplateFunction_getArgs(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(std::vector< opensmt::PTRef > **)&jresult = new std::vector< opensmt::PTRef >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1TemplateFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::TemplateFunction *arg1 = (opensmt::TemplateFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::TemplateFunction **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Pterm_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  opensmt::Pterm *arg1 = (opensmt::Pterm *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Pterm **)&jarg1; 
  {
    try {
      result = (int)((opensmt::Pterm const *)arg1)->size(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Pterm_1symb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Pterm *arg1 = (opensmt::Pterm *) 0 ;
  opensmt::SymRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Pterm **)&jarg1; 
  {
    try {
      result = ((opensmt::Pterm const *)arg1)->symb(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SymRef **)&jresult = new opensmt::SymRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Pterm_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  opensmt::Pterm *arg1 = (opensmt::Pterm *) 0 ;
  int arg2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Pterm **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = opensmt_Pterm_at(arg1,arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1Pterm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::Pterm *arg1 = (opensmt::Pterm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::Pterm **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Model_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Model *arg1 = (opensmt::Model *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Model **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->evaluate(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Model_1getDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Model *arg1 = (opensmt::Model *) 0 ;
  opensmt::SymRef arg2 ;
  opensmt::SymRef *argp2 ;
  opensmt::TemplateFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Model **)&jarg1; 
  argp2 = *(opensmt::SymRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SymRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((opensmt::Model const *)arg1)->getDefinition(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::TemplateFunction **)&jresult = new opensmt::TemplateFunction(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::Model *arg1 = (opensmt::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::Model **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jchar JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_sstat_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  opensmt::sstat *arg1 = (opensmt::sstat *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::sstat **)&jarg1; 
  {
    try {
      result = (char)((opensmt::sstat const *)arg1)->getValue(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_sstat_1True(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::sstat result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = opensmt_sstat_True(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::sstat **)&jresult = new opensmt::sstat(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_sstat_1False(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::sstat result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = opensmt_sstat_False(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::sstat **)&jresult = new opensmt::sstat(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_sstat_1Undef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::sstat result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = opensmt_sstat_Undef(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::sstat **)&jresult = new opensmt::sstat(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_sstat_1Error(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  opensmt::sstat result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = opensmt_sstat_Error(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::sstat **)&jresult = new opensmt::sstat(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1sstat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::sstat *arg1 = (opensmt::sstat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::sstat **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1MainSolver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = 0 ;
  opensmt::SMTConfig *arg2 = 0 ;
  std::string arg3 ;
  opensmt::MainSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::Logic & is null");
    return 0;
  } 
  arg2 = *(opensmt::SMTConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::SMTConfig & is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (opensmt::MainSolver *)new opensmt::MainSolver(*arg1,*arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::MainSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1MainSolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1MainSolver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = 0 ;
  std::unique_ptr< opensmt::MainSolver > rvrdeleter1 ;
  opensmt::MainSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::MainSolver && is null");
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  {
    try {
      result = (opensmt::MainSolver *)new opensmt::MainSolver((opensmt::MainSolver &&)*arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::MainSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  opensmt::SMTConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = (opensmt::SMTConfig *) &((opensmt::MainSolver const *)arg1)->getConfig(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SMTConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getLogic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  opensmt::Logic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = (opensmt::Logic *) &((opensmt::MainSolver const *)arg1)->getLogic(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::Logic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1push(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      (arg1)->push(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1pop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->pop(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getAssertionLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = ((opensmt::MainSolver const *)arg1)->getAssertionLevel(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1insertFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->insertFormula(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getInsertedFormulasCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = ((opensmt::MainSolver const *)arg1)->getInsertedFormulasCount(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  opensmt::sstat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = (arg1)->check(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::sstat **)&jresult = new opensmt::sstat(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  opensmt::sstat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = (arg1)->solve(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::sstat **)&jresult = new opensmt::sstat(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  opensmt::sstat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = ((opensmt::MainSolver const *)arg1)->getStatus(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::sstat **)&jresult = new opensmt::sstat(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  std::unique_ptr< opensmt::Model > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = (arg1)->getModel(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  
  jlong lpp = 0;
  *(opensmt::Model **) &lpp = (&result)->release();
  jresult = lpp;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getInterpolationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  std::unique_ptr< opensmt::InterpolationContext > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = (arg1)->getInterpolationContext(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  
  jlong lpp = 0;
  *(opensmt::InterpolationContext **) &lpp = (&result)->release();
  jresult = lpp;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      (arg1)->stop(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_MainSolver_1getUnsatCore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::MainSolver *arg1 = (opensmt::MainSolver *) 0 ;
  std::vector< opensmt::PTRef > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::MainSolver **)&jarg1; 
  {
    try {
      result = opensmt_MainSolver_getUnsatCore(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(std::vector< opensmt::PTRef > **)&jresult = new std::vector< opensmt::PTRef >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1Logic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  opensmt::Logic_t arg1 ;
  opensmt::Logic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (opensmt::Logic_t)jarg1; 
  {
    try {
      result = (opensmt::Logic *)new opensmt::Logic(arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::Logic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1Logic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::Logic **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1Logic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = 0 ;
  std::unique_ptr< opensmt::Logic > rvrdeleter1 ;
  opensmt::Logic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Logic **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::Logic && is null");
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  {
    try {
      result = (opensmt::Logic *)new opensmt::Logic((opensmt::Logic &&)*arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::Logic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getSortDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef *argp2 ;
  opensmt::Sort *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (opensmt::Sort *) &((opensmt::Logic const *)arg1)->getSortDefinition(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::Sort **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getSortSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SSymRef arg2 ;
  opensmt::SSymRef *argp2 ;
  opensmt::SortSymbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SSymRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SSymRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (opensmt::SortSymbol *) &((opensmt::Logic const *)arg1)->getSortSymbol(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SortSymbol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getSortRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->getSortRef(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1printSort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->printSort(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1declareUninterpretedSort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::string *arg2 = 0 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->declareUninterpretedSort((std::string const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isArraySort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isArraySort(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getArraySort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef arg3 ;
  opensmt::SRef *argp2 ;
  opensmt::SRef *argp3 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::SRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->getArraySort(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isArrayStore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isArrayStore(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isArraySelect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isArraySelect(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getSym(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SymRef arg2 ;
  opensmt::SymRef const *argp2 ;
  opensmt::Symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SymRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SymRef const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (opensmt::Symbol *) &((opensmt::Logic const *)arg1)->getSym(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::Symbol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getSymRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef const *argp2 ;
  opensmt::SymRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->getSymRef(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SymRef **)&jresult = new opensmt::SymRef(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getSymName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SymRef arg2 ;
  opensmt::SymRef const *argp2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SymRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SymRef const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (char *)((opensmt::Logic const *)arg1)->getSymName(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getPterm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef const *argp2 ;
  opensmt::Pterm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (opensmt::Pterm *) &(arg1)->getPterm(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::Pterm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkAnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkAnd(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkOr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkOr(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkXor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkXor(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkImpl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkImpl(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->mkNot(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkIte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef arg4 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef *argp4 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(opensmt::PTRef **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->mkIte(arg2,arg3,arg4); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkEq_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkEq(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkVar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  opensmt::SRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (arg1)->mkVar(arg2,(char const *)arg3,arg4); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkVar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  char *arg3 = (char *) 0 ;
  opensmt::SRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (arg1)->mkVar(arg2,(char const *)arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  char *arg3 = (char *) 0 ;
  opensmt::SRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (arg1)->mkConst(arg2,(char const *)arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkBoolVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  char *arg2 = (char *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (arg1)->mkBoolVar((char const *)arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1dumpWithLets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->dumpWithLets(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1parseFormula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::string arg2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->parseFormula(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getSort_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->getSort_bool(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getTerm_1true(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->getTerm_true(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getTerm_1false(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->getTerm_false(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isEquality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isEquality(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isDisequality(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isDisequality(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isIte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isIte(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isConstant(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isVar(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isUF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isUF(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isAnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isAnd(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isOr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isOr(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isNot(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isXor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isXor(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isImplies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isImplies(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isTrue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isTrue(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isFalse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isFalse(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isIff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::Logic const *)arg1)->isIff(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1protectName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SymRef arg2 ;
  opensmt::SymRef *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SymRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SymRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->protectName(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1pp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((opensmt::Logic const *)arg1)->pp(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkStore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef arg4 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef *argp4 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(opensmt::PTRef **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = opensmt_Logic_mkStore(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkSelect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = opensmt_Logic_mkSelect(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = opensmt_Logic_getDefaultValue(arg1,SWIG_STD_MOVE(arg2)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkUninterpFun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SymRef arg2 ;
  std::vector< opensmt::PTRef > *arg3 = 0 ;
  opensmt::SymRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SymRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SymRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(std::vector< opensmt::PTRef > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_mkUninterpFun(arg1,SWIG_STD_MOVE(arg2),(std::vector< opensmt::PTRef > const &)*arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkAnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::vector< opensmt::PTRef > *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  arg2 = *(std::vector< opensmt::PTRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_mkAnd__SWIG_1(arg1,(std::vector< opensmt::PTRef > const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkOr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::vector< opensmt::PTRef > *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  arg2 = *(std::vector< opensmt::PTRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_mkOr__SWIG_1(arg1,(std::vector< opensmt::PTRef > const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkImpl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::vector< opensmt::PTRef > *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  arg2 = *(std::vector< opensmt::PTRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_mkImpl__SWIG_1(arg1,(std::vector< opensmt::PTRef > const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkEq_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::vector< opensmt::PTRef > *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  arg2 = *(std::vector< opensmt::PTRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_mkEq__SWIG_1(arg1,(std::vector< opensmt::PTRef > const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkDistinct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::vector< opensmt::PTRef > *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  arg2 = *(std::vector< opensmt::PTRef > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_mkDistinct__SWIG_0(arg1,(std::vector< opensmt::PTRef > const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1mkDistinct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = opensmt_Logic_mkDistinct__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1declareFun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  std::string *arg2 = 0 ;
  opensmt::SRef arg3 ;
  std::vector< opensmt::SRef > *arg4 = 0 ;
  opensmt::SRef *argp3 ;
  opensmt::SymRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(opensmt::SRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(std::vector< opensmt::SRef > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::SRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_declareFun(arg1,(std::string const &)*arg2,SWIG_STD_MOVE(arg3),(std::vector< opensmt::SRef > const &)*arg4); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SymRef **)&jresult = new opensmt::SymRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1instantiateFunctionTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::TemplateFunction *arg2 = 0 ;
  std::vector< opensmt::PTRef > *arg3 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  arg2 = *(opensmt::TemplateFunction **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::TemplateFunction const & is null");
    return 0;
  } 
  arg3 = *(std::vector< opensmt::PTRef > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_instantiateFunctionTemplate(arg1,(opensmt::TemplateFunction const &)*arg2,(std::vector< opensmt::PTRef > const &)*arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1isSortBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)opensmt_Logic_isSortBool(arg1,SWIG_STD_MOVE(arg2)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_Logic_1insertTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::Logic *arg1 = (opensmt::Logic *) 0 ;
  opensmt::SymRef arg2 ;
  std::vector< opensmt::PTRef > *arg3 = 0 ;
  opensmt::SymRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::Logic **)&jarg1; 
  argp2 = *(opensmt::SymRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SymRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(std::vector< opensmt::PTRef > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< opensmt::PTRef > const & is null");
    return 0;
  } 
  {
    try {
      result = opensmt_Logic_insertTerm(arg1,SWIG_STD_MOVE(arg2),(std::vector< opensmt::PTRef > const &)*arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_delete_1ArithLogic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      delete arg1; 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_new_1ArithLogic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = 0 ;
  std::unique_ptr< opensmt::ArithLogic > rvrdeleter1 ;
  opensmt::ArithLogic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "opensmt::ArithLogic && is null");
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  {
    try {
      result = (opensmt::ArithLogic *)new opensmt::ArithLogic((opensmt::ArithLogic &&)*arg1); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::ArithLogic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getSort_1real(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getSort_real(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getSort_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::SRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getSort_int(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::SRef **)&jresult = new opensmt::SRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::SRef arg2 ;
  char *arg3 = (char *) 0 ;
  opensmt::SRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    try {
      result = (arg1)->mkConst(arg2,(char const *)arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkIntVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  char *arg2 = (char *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (arg1)->mkIntVar((char const *)arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkRealVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  char *arg2 = (char *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (arg1)->mkRealVar((char const *)arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isNumConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isNumConst(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isIntConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isIntConst(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isRealConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isRealConst(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isSortInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isSortInt(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isSortReal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::SRef arg2 ;
  opensmt::SRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::SRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::SRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isSortReal(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isPlus(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isNeg(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isTimes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isTimes(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isLeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isLeq(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isLt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isLt(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isGeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isGeq(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isGt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((opensmt::ArithLogic const *)arg1)->isGt(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getTerm_1IntZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getTerm_IntZero(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getTerm_1RealZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getTerm_RealZero(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getTerm_1IntOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getTerm_IntOne(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getTerm_1RealOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getTerm_RealOne(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getTerm_1IntMinusOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getTerm_IntMinusOne(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getTerm_1RealMinusOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  {
    try {
      result = ((opensmt::ArithLogic const *)arg1)->getTerm_RealMinusOne(); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->mkNeg(arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkMinus(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkPlus(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkTimes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkTimes(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkIntDiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkIntDiv(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkRealDiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkRealDiv(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkMod(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkLeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkLeq(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkGeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkGeq(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkLt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkLt(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkGt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef arg3 ;
  opensmt::PTRef *argp2 ;
  opensmt::PTRef *argp3 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(opensmt::PTRef **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (arg1)->mkGt(arg2,arg3); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkIntConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  std::string *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = opensmt_ArithLogic_mkIntConst(arg1,(std::string const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1mkRealConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  std::string *arg2 = 0 ;
  opensmt::PTRef result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = opensmt_ArithLogic_mkRealConst(arg1,(std::string const &)*arg2); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  *(opensmt::PTRef **)&jresult = new opensmt::PTRef(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1getNumConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = opensmt_ArithLogic_getNumConst(arg1,SWIG_STD_MOVE(arg2)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isMinus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)opensmt_ArithLogic_isMinus((opensmt::ArithLogic const *)arg1,SWIG_STD_MOVE(arg2)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isDiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)opensmt_ArithLogic_isDiv((opensmt::ArithLogic const *)arg1,SWIG_STD_MOVE(arg2)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1isMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  opensmt::ArithLogic *arg1 = (opensmt::ArithLogic *) 0 ;
  opensmt::PTRef arg2 ;
  opensmt::PTRef *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(opensmt::ArithLogic **)&jarg1; 
  argp2 = *(opensmt::PTRef **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null opensmt::PTRef");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)opensmt_ArithLogic_isMod((opensmt::ArithLogic const *)arg1,SWIG_STD_MOVE(arg2)); 
    }
    catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/UnsupportedOperationException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
    catch(OutOfMemoryException& e) {
      jclass exceptionType = jenv->FindClass("java/lang/OutOfMemoryError");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
    catch(...) {
      jclass exceptionType = jenv->FindClass("java/lang/RuntimeException");
      jenv->ThrowNew(exceptionType, "");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_opensmt_api_OsmtNativeJNI_ArithLogic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(opensmt::Logic **)&baseptr = *(opensmt::ArithLogic **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

