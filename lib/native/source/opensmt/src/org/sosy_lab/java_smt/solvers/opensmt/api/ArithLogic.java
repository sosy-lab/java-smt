// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sosy_lab.java_smt.solvers.opensmt.api;

public class ArithLogic extends Logic {
  private transient long swigCPtr;

  protected ArithLogic(long cPtr, boolean cMemoryOwn) {
    super(OsmtNativeJNI.ArithLogic_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ArithLogic obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(ArithLogic obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OsmtNativeJNI.delete_ArithLogic(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ArithLogic(ArithLogic arg0) {
    this(OsmtNativeJNI.new_ArithLogic(ArithLogic.swigRelease(arg0), arg0), true);
  }

  public SRef getSort_real() {
    return new SRef(OsmtNativeJNI.ArithLogic_getSort_real(swigCPtr, this), true);
  }

  public SRef getSort_int() {
    return new SRef(OsmtNativeJNI.ArithLogic_getSort_int(swigCPtr, this), true);
  }

  public PTRef mkConst(SRef s, String name) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkConst(swigCPtr, this, SRef.getCPtr(s), s, name), true);
  }

  public PTRef mkIntVar(String name) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkIntVar(swigCPtr, this, name), true);
  }

  public PTRef mkRealVar(String name) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkRealVar(swigCPtr, this, name), true);
  }

  public boolean isNumConst(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isNumConst(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isIntConst(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isIntConst(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isRealConst(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isRealConst(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isSortInt(SRef sr) {
    return OsmtNativeJNI.ArithLogic_isSortInt(swigCPtr, this, SRef.getCPtr(sr), sr);
  }

  public boolean isSortReal(SRef sr) {
    return OsmtNativeJNI.ArithLogic_isSortReal(swigCPtr, this, SRef.getCPtr(sr), sr);
  }

  public boolean isPlus(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isPlus(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isNeg(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isNeg(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isTimes(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isTimes(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isLeq(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isLeq(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isLt(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isLt(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isGeq(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isGeq(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isGt(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isGt(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public PTRef getTerm_IntZero() {
    return new PTRef(OsmtNativeJNI.ArithLogic_getTerm_IntZero(swigCPtr, this), true);
  }

  public PTRef getTerm_RealZero() {
    return new PTRef(OsmtNativeJNI.ArithLogic_getTerm_RealZero(swigCPtr, this), true);
  }

  public PTRef getTerm_IntOne() {
    return new PTRef(OsmtNativeJNI.ArithLogic_getTerm_IntOne(swigCPtr, this), true);
  }

  public PTRef getTerm_RealOne() {
    return new PTRef(OsmtNativeJNI.ArithLogic_getTerm_RealOne(swigCPtr, this), true);
  }

  public PTRef getTerm_IntMinusOne() {
    return new PTRef(OsmtNativeJNI.ArithLogic_getTerm_IntMinusOne(swigCPtr, this), true);
  }

  public PTRef getTerm_RealMinusOne() {
    return new PTRef(OsmtNativeJNI.ArithLogic_getTerm_RealMinusOne(swigCPtr, this), true);
  }

  public PTRef mkNeg(PTRef tr) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkNeg(swigCPtr, this, PTRef.getCPtr(tr), tr), true);
  }

  public PTRef mkMinus(PTRef a1, PTRef a2) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkMinus(swigCPtr, this, PTRef.getCPtr(a1), a1, PTRef.getCPtr(a2), a2), true);
  }

  public PTRef mkPlus(PTRef p1, PTRef p2) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkPlus(swigCPtr, this, PTRef.getCPtr(p1), p1, PTRef.getCPtr(p2), p2), true);
  }

  public PTRef mkTimes(PTRef p1, PTRef p2) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkTimes(swigCPtr, this, PTRef.getCPtr(p1), p1, PTRef.getCPtr(p2), p2), true);
  }

  public PTRef mkIntDiv(PTRef nom, PTRef den) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkIntDiv(swigCPtr, this, PTRef.getCPtr(nom), nom, PTRef.getCPtr(den), den), true);
  }

  public PTRef mkRealDiv(PTRef nom, PTRef den) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkRealDiv(swigCPtr, this, PTRef.getCPtr(nom), nom, PTRef.getCPtr(den), den), true);
  }

  public PTRef mkMod(PTRef first, PTRef second) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkMod(swigCPtr, this, PTRef.getCPtr(first), first, PTRef.getCPtr(second), second), true);
  }

  public PTRef mkLeq(PTRef arg1, PTRef arg2) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkLeq(swigCPtr, this, PTRef.getCPtr(arg1), arg1, PTRef.getCPtr(arg2), arg2), true);
  }

  public PTRef mkGeq(PTRef arg1, PTRef arg2) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkGeq(swigCPtr, this, PTRef.getCPtr(arg1), arg1, PTRef.getCPtr(arg2), arg2), true);
  }

  public PTRef mkLt(PTRef arg1, PTRef arg2) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkLt(swigCPtr, this, PTRef.getCPtr(arg1), arg1, PTRef.getCPtr(arg2), arg2), true);
  }

  public PTRef mkGt(PTRef arg1, PTRef arg2) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkGt(swigCPtr, this, PTRef.getCPtr(arg1), arg1, PTRef.getCPtr(arg2), arg2), true);
  }

  public PTRef mkIntConst(String c) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkIntConst(swigCPtr, this, c), true);
  }

  public PTRef mkRealConst(String c) {
    return new PTRef(OsmtNativeJNI.ArithLogic_mkRealConst(swigCPtr, this, c), true);
  }

  public String getNumConst(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_getNumConst(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isMinus(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isMinus(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isDiv(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isDiv(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isMod(PTRef tr) {
    return OsmtNativeJNI.ArithLogic_isMod(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

}
