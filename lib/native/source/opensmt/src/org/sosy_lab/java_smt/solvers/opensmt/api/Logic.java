// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sosy_lab.java_smt.solvers.opensmt.api;

public class Logic {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Logic(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Logic obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Logic obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OsmtNativeJNI.delete_Logic(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Logic(Logic_t type) {
    this(OsmtNativeJNI.new_Logic__SWIG_0(type.swigValue()), true);
  }

  public Logic(Logic arg0) {
    this(OsmtNativeJNI.new_Logic__SWIG_1(Logic.swigRelease(arg0), arg0), true);
  }

  public Sort getSortDefinition(SRef s) {
    return new Sort(OsmtNativeJNI.Logic_getSortDefinition(swigCPtr, this, SRef.getCPtr(s), s), false);
  }

  public SortSymbol getSortSymbol(SSymRef ss) {
    return new SortSymbol(OsmtNativeJNI.Logic_getSortSymbol(swigCPtr, this, SSymRef.getCPtr(ss), ss), false);
  }

  public SRef getSortRef(PTRef tr) {
    return new SRef(OsmtNativeJNI.Logic_getSortRef(swigCPtr, this, PTRef.getCPtr(tr), tr), true);
  }

  public String printSort(SRef s) {
    return OsmtNativeJNI.Logic_printSort(swigCPtr, this, SRef.getCPtr(s), s);
  }

  public SRef declareUninterpretedSort(String arg0) {
    return new SRef(OsmtNativeJNI.Logic_declareUninterpretedSort(swigCPtr, this, arg0), true);
  }

  public boolean isArraySort(SRef sref) {
    return OsmtNativeJNI.Logic_isArraySort(swigCPtr, this, SRef.getCPtr(sref), sref);
  }

  public SRef getArraySort(SRef domain, SRef codomain) {
    return new SRef(OsmtNativeJNI.Logic_getArraySort(swigCPtr, this, SRef.getCPtr(domain), domain, SRef.getCPtr(codomain), codomain), true);
  }

  public boolean isArrayStore(PTRef arg0) {
    return OsmtNativeJNI.Logic_isArrayStore(swigCPtr, this, PTRef.getCPtr(arg0), arg0);
  }

  public boolean isArraySelect(PTRef arg0) {
    return OsmtNativeJNI.Logic_isArraySelect(swigCPtr, this, PTRef.getCPtr(arg0), arg0);
  }

  public Symbol getSym(SymRef s) {
    return new Symbol(OsmtNativeJNI.Logic_getSym(swigCPtr, this, SymRef.getCPtr(s), s), false);
  }

  public SymRef getSymRef(PTRef tr) {
    return new SymRef(OsmtNativeJNI.Logic_getSymRef(swigCPtr, this, PTRef.getCPtr(tr), tr), true);
  }

  public String getSymName(SymRef s) {
    return OsmtNativeJNI.Logic_getSymName(swigCPtr, this, SymRef.getCPtr(s), s);
  }

  public Pterm getPterm(PTRef tr) {
    return new Pterm(OsmtNativeJNI.Logic_getPterm(swigCPtr, this, PTRef.getCPtr(tr), tr), false);
  }

  public PTRef mkAnd(PTRef a1, PTRef a2) {
    return new PTRef(OsmtNativeJNI.Logic_mkAnd__SWIG_0(swigCPtr, this, PTRef.getCPtr(a1), a1, PTRef.getCPtr(a2), a2), true);
  }

  public PTRef mkOr(PTRef a1, PTRef a2) {
    return new PTRef(OsmtNativeJNI.Logic_mkOr__SWIG_0(swigCPtr, this, PTRef.getCPtr(a1), a1, PTRef.getCPtr(a2), a2), true);
  }

  public PTRef mkXor(PTRef a1, PTRef a2) {
    return new PTRef(OsmtNativeJNI.Logic_mkXor(swigCPtr, this, PTRef.getCPtr(a1), a1, PTRef.getCPtr(a2), a2), true);
  }

  public PTRef mkImpl(PTRef a1, PTRef a2) {
    return new PTRef(OsmtNativeJNI.Logic_mkImpl__SWIG_0(swigCPtr, this, PTRef.getCPtr(a1), a1, PTRef.getCPtr(a2), a2), true);
  }

  public PTRef mkNot(PTRef arg0) {
    return new PTRef(OsmtNativeJNI.Logic_mkNot(swigCPtr, this, PTRef.getCPtr(arg0), arg0), true);
  }

  public PTRef mkIte(PTRef c, PTRef t, PTRef e) {
    return new PTRef(OsmtNativeJNI.Logic_mkIte(swigCPtr, this, PTRef.getCPtr(c), c, PTRef.getCPtr(t), t, PTRef.getCPtr(e), e), true);
  }

  public PTRef mkEq(PTRef a1, PTRef a2) {
    return new PTRef(OsmtNativeJNI.Logic_mkEq__SWIG_0(swigCPtr, this, PTRef.getCPtr(a1), a1, PTRef.getCPtr(a2), a2), true);
  }

  public PTRef mkVar(SRef arg0, String arg1, boolean isInterpreted) {
    return new PTRef(OsmtNativeJNI.Logic_mkVar__SWIG_0(swigCPtr, this, SRef.getCPtr(arg0), arg0, arg1, isInterpreted), true);
  }

  public PTRef mkVar(SRef arg0, String arg1) {
    return new PTRef(OsmtNativeJNI.Logic_mkVar__SWIG_1(swigCPtr, this, SRef.getCPtr(arg0), arg0, arg1), true);
  }

  public PTRef mkConst(SRef arg0, String arg1) {
    return new PTRef(OsmtNativeJNI.Logic_mkConst(swigCPtr, this, SRef.getCPtr(arg0), arg0, arg1), true);
  }

  public PTRef mkBoolVar(String name) {
    return new PTRef(OsmtNativeJNI.Logic_mkBoolVar(swigCPtr, this, name), true);
  }

  public String dumpWithLets(PTRef formula) {
    return OsmtNativeJNI.Logic_dumpWithLets(swigCPtr, this, PTRef.getCPtr(formula), formula);
  }

  public PTRef parseFormula(String input) {
    return new PTRef(OsmtNativeJNI.Logic_parseFormula(swigCPtr, this, input), true);
  }

  public SRef getSort_bool() {
    return new SRef(OsmtNativeJNI.Logic_getSort_bool(swigCPtr, this), true);
  }

  public PTRef getTerm_true() {
    return new PTRef(OsmtNativeJNI.Logic_getTerm_true(swigCPtr, this), true);
  }

  public PTRef getTerm_false() {
    return new PTRef(OsmtNativeJNI.Logic_getTerm_false(swigCPtr, this), true);
  }

  public boolean isEquality(PTRef tr) {
    return OsmtNativeJNI.Logic_isEquality(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isDisequality(PTRef tr) {
    return OsmtNativeJNI.Logic_isDisequality(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isIte(PTRef tr) {
    return OsmtNativeJNI.Logic_isIte(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isConstant(PTRef tr) {
    return OsmtNativeJNI.Logic_isConstant(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isVar(PTRef tr) {
    return OsmtNativeJNI.Logic_isVar(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isUF(PTRef arg0) {
    return OsmtNativeJNI.Logic_isUF(swigCPtr, this, PTRef.getCPtr(arg0), arg0);
  }

  public boolean isAnd(PTRef tr) {
    return OsmtNativeJNI.Logic_isAnd(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isOr(PTRef tr) {
    return OsmtNativeJNI.Logic_isOr(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isNot(PTRef tr) {
    return OsmtNativeJNI.Logic_isNot(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isXor(PTRef tr) {
    return OsmtNativeJNI.Logic_isXor(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isImplies(PTRef tr) {
    return OsmtNativeJNI.Logic_isImplies(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isTrue(PTRef tr) {
    return OsmtNativeJNI.Logic_isTrue(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isFalse(PTRef tr) {
    return OsmtNativeJNI.Logic_isFalse(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public boolean isIff(PTRef tr) {
    return OsmtNativeJNI.Logic_isIff(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public String protectName(SymRef sr) {
    return OsmtNativeJNI.Logic_protectName(swigCPtr, this, SymRef.getCPtr(sr), sr);
  }

  public String pp(PTRef tr) {
    return OsmtNativeJNI.Logic_pp(swigCPtr, this, PTRef.getCPtr(tr), tr);
  }

  public PTRef mkStore(PTRef array, PTRef index, PTRef value) {
    return new PTRef(OsmtNativeJNI.Logic_mkStore(swigCPtr, this, PTRef.getCPtr(array), array, PTRef.getCPtr(index), index, PTRef.getCPtr(value), value), true);
  }

  public PTRef mkSelect(PTRef array, PTRef index) {
    return new PTRef(OsmtNativeJNI.Logic_mkSelect(swigCPtr, this, PTRef.getCPtr(array), array, PTRef.getCPtr(index), index), true);
  }

  public PTRef getDefaultValue(SRef sref) {
    return new PTRef(OsmtNativeJNI.Logic_getDefaultValue(swigCPtr, this, SRef.getCPtr(sref), sref), true);
  }

  public PTRef mkUninterpFun(SymRef f, VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_mkUninterpFun(swigCPtr, this, SymRef.getCPtr(f), f, VectorPTRef.getCPtr(args), args), true);
  }

  public PTRef mkAnd(VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_mkAnd__SWIG_1(swigCPtr, this, VectorPTRef.getCPtr(args), args), true);
  }

  public PTRef mkOr(VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_mkOr__SWIG_1(swigCPtr, this, VectorPTRef.getCPtr(args), args), true);
  }

  public PTRef mkImpl(VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_mkImpl__SWIG_1(swigCPtr, this, VectorPTRef.getCPtr(args), args), true);
  }

  public PTRef mkEq(VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_mkEq__SWIG_1(swigCPtr, this, VectorPTRef.getCPtr(args), args), true);
  }

  public PTRef mkDistinct(VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_mkDistinct__SWIG_0(swigCPtr, this, VectorPTRef.getCPtr(args), args), true);
  }

  public PTRef mkDistinct(PTRef a, PTRef b) {
    return new PTRef(OsmtNativeJNI.Logic_mkDistinct__SWIG_1(swigCPtr, this, PTRef.getCPtr(a), a, PTRef.getCPtr(b), b), true);
  }

  public SymRef declareFun(String fname, SRef rsort, VectorSRef args) {
    return new SymRef(OsmtNativeJNI.Logic_declareFun(swigCPtr, this, fname, SRef.getCPtr(rsort), rsort, VectorSRef.getCPtr(args), args), true);
  }

  public PTRef instantiateFunctionTemplate(TemplateFunction tmplt, VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_instantiateFunctionTemplate(swigCPtr, this, TemplateFunction.getCPtr(tmplt), tmplt, VectorPTRef.getCPtr(args), args), true);
  }

  public boolean isSortBool(SRef sort) {
    return OsmtNativeJNI.Logic_isSortBool(swigCPtr, this, SRef.getCPtr(sort), sort);
  }

  public PTRef insertTerm(SymRef sym, VectorPTRef args) {
    return new PTRef(OsmtNativeJNI.Logic_insertTerm(swigCPtr, this, SymRef.getCPtr(sym), sym, VectorPTRef.getCPtr(args), args), true);
  }

}
