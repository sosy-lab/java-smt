// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sosy_lab.java_smt.solvers.opensmt.api;

public class MainSolver {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected MainSolver(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MainSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(MainSolver obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OsmtNativeJNI.delete_MainSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public MainSolver(Logic logic, SMTConfig conf, String name) {
    this(OsmtNativeJNI.new_MainSolver__SWIG_0(Logic.getCPtr(logic), logic, SMTConfig.getCPtr(conf), conf, name), true);
  }

  public MainSolver(MainSolver arg0) {
    this(OsmtNativeJNI.new_MainSolver__SWIG_1(MainSolver.swigRelease(arg0), arg0), true);
  }

  public SMTConfig getConfig() {
    return new SMTConfig(OsmtNativeJNI.MainSolver_getConfig(swigCPtr, this), false);
  }

  public Logic getLogic() {
    return new Logic(OsmtNativeJNI.MainSolver_getLogic(swigCPtr, this), false);
  }

  public void push() {
    OsmtNativeJNI.MainSolver_push(swigCPtr, this);
  }

  public boolean pop() {
    return OsmtNativeJNI.MainSolver_pop(swigCPtr, this);
  }

  public long getAssertionLevel() {
    return OsmtNativeJNI.MainSolver_getAssertionLevel(swigCPtr, this);
  }

  public void insertFormula(PTRef fla) {
    OsmtNativeJNI.MainSolver_insertFormula(swigCPtr, this, PTRef.getCPtr(fla), fla);
  }

  public long getInsertedFormulasCount() {
    return OsmtNativeJNI.MainSolver_getInsertedFormulasCount(swigCPtr, this);
  }

  public sstat check() {
    return new sstat(OsmtNativeJNI.MainSolver_check(swigCPtr, this), true);
  }

  public sstat solve() {
    return new sstat(OsmtNativeJNI.MainSolver_solve(swigCPtr, this), true);
  }

  public sstat getStatus() {
    return new sstat(OsmtNativeJNI.MainSolver_getStatus(swigCPtr, this), true);
  }

  public Model getModel() {
    long cPtr = OsmtNativeJNI.MainSolver_getModel(swigCPtr, this);
    return (cPtr == 0) ? null : new Model(cPtr, true);
  }

  public InterpolationContext getInterpolationContext() {
    long cPtr = OsmtNativeJNI.MainSolver_getInterpolationContext(swigCPtr, this);
    return (cPtr == 0) ? null : new InterpolationContext(cPtr, true);
  }

  public void stop() {
    OsmtNativeJNI.MainSolver_stop(swigCPtr, this);
  }

  public VectorPTRef getUnsatCore() {
    return new VectorPTRef(OsmtNativeJNI.MainSolver_getUnsatCore(swigCPtr, this), true);
  }

}
