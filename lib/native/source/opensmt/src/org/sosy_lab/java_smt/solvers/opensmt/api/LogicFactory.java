// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2025 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sosy_lab.java_smt.solvers.opensmt.api;

public class LogicFactory {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected LogicFactory(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LogicFactory obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(LogicFactory obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OsmtNativeJNI.delete_LogicFactory(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static Logic getInstance(Logic_t arg0) {
    long cPtr = OsmtNativeJNI.LogicFactory_getInstance(arg0.swigValue());
    return (cPtr == 0) ? null : new Logic(cPtr, true);
  }

  public static ArithLogic getLAInstance(Logic_t arg0) {
    long cPtr = OsmtNativeJNI.LogicFactory_getLAInstance(arg0.swigValue());
    return (cPtr == 0) ? null : new ArithLogic(cPtr, true);
  }

  public static ArithLogic getLRAInstance() {
    long cPtr = OsmtNativeJNI.LogicFactory_getLRAInstance();
    return (cPtr == 0) ? null : new ArithLogic(cPtr, true);
  }

  public static ArithLogic getLIAInstance() {
    long cPtr = OsmtNativeJNI.LogicFactory_getLIAInstance();
    return (cPtr == 0) ? null : new ArithLogic(cPtr, true);
  }

  public static String getVersion() {
    return OsmtNativeJNI.LogicFactory_getVersion();
  }

}
