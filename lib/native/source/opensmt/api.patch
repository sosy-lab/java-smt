diff --git a/src/api/Interpret.cc b/src/api/Interpret.cc
index cd5e32e3..3bca780a 100644
--- a/src/api/Interpret.cc
+++ b/src/api/Interpret.cc
@@ -27,6 +27,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include "Interpret.h"
 
 #include <api/smt2tokens.h>
+#include <common/ApiException.h>
 #include <logics/ArithLogic.h>
 #include <logics/LogicFactory.h>
 #include <rewriters/Substitutor.h>
@@ -42,7 +43,12 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 namespace opensmt {
 
-Interpret::~Interpret() = default;
+Interpret::~Interpret() {
+    // If the logic was given in the constructor, and not set by the string-input, we have to clean up the reference
+    if (!ownsLogic) {
+        logic.release();
+    }
+}
 
 PTRef
 Interpret::getParsedFormula()
@@ -1043,11 +1049,13 @@ void Interpret::comment_formatted(const char* fmt_str, ...) const {
 
 
 void Interpret::notify_formatted(bool error, const char* fmt_str, ...) {
+    std::stringstream out;
+
     va_list ap;
     int d;
     char c1, *t;
     if (error)
-        std::cout << "(error \"";
+        out << "(error \"";
 
     va_start(ap, fmt_str);
     while (true) {
@@ -1056,25 +1064,29 @@ void Interpret::notify_formatted(bool error, const char* fmt_str, ...) {
             switch (*fmt_str++) {
             case 's':
                 t = va_arg(ap, char *);
-                std::cout << t;
+                out << t;
                 break;
             case 'd':
                 d = va_arg(ap, int);
-                std::cout << d;
+                out << d;
                 break;
             case '%':
-                std::cout << '%';
+                out << '%';
                 break;
             }
         }
         else if (c1 != '\0')
-            std::cout << c1;
+            out << c1;
         else break;
     }
     va_end(ap);
     if (error)
-        std::cout << "\")" << '\n';
-    std::cout << std::endl;
+        out << "\")" << '\n';
+    out << std::endl;
+
+    if (error)
+        throw ApiException(out.str());
+    std::cout << out.str();
 }
 
 void Interpret::notify_success() {
diff --git a/src/api/Interpret.h b/src/api/Interpret.h
index dcc930a9..77e0b402 100644
--- a/src/api/Interpret.h
+++ b/src/api/Interpret.h
@@ -138,6 +138,7 @@ class Interpret {
     std::unique_ptr<MainSolver> main_solver;
 
     bool            f_exit;
+    bool            ownsLogic;
 
     vec<PTRef>      assertions;
     vec<SymRef>     user_declarations;
@@ -188,8 +189,19 @@ class Interpret {
     Interpret(SMTConfig & c)
         : config     (c)
         , f_exit     (false)
+        , ownsLogic  (true)
         { }
 
+    /** This constructor reuses the existing logic from caller context. */
+    Interpret(SMTConfig & c, Logic & l)
+        : config     (c)
+        , f_exit     (false)
+        , ownsLogic  (false) {
+        logic.reset(&l);
+        main_solver = createMainSolver(l.getName().c_str());
+        main_solver->initialize();
+    }
+
     ~Interpret();
 
     int interpFile(FILE* in);
diff --git a/src/api/MainSolver.h b/src/api/MainSolver.h
index 01fc6ad3..05d5ee2f 100644
--- a/src/api/MainSolver.h
+++ b/src/api/MainSolver.h
@@ -103,7 +103,7 @@ public:
     // I.e., *excluding* popped assertions
     vec<PTRef> getCurrentAssertions() const;
     // Returns just a view to the assertions
-    auto getCurrentAssertionsView() const { return getCurrentAssertionsViewImpl(); }
+    vec<PTRef> getCurrentAssertionsView() const { return getCurrentAssertionsViewImpl(); }
 
     vec<PTRef> const & getAssertionsAtCurrentLevel() const { return getAssertionsAtLevel(getAssertionLevel()); }
     vec<PTRef> const & getAssertionsAtLevel(std::size_t) const;
diff --git a/src/common/FastRational.cc b/src/common/FastRational.cc
index 68566c05..563fe045 100644
--- a/src/common/FastRational.cc
+++ b/src/common/FastRational.cc
@@ -15,18 +15,22 @@ namespace opensmt {
 mpq_ptr FastRational::mpqPool::alloc()
 {
     mpq_ptr r;
+    cs.lock();
     if (!pool.empty()) {
         r = pool.top();
         pool.pop();
     } else {
         r = store.emplace().get_mpq_t();
     }
+    cs.unlock();
     return r;
 }
 
 void FastRational::mpqPool::release(mpq_ptr ptr)
 {
+    cs.lock();
     pool.push(ptr);
+    cs.unlock();
 }
 
 FastRational::FastRational( const char * s, const int base )
diff --git a/src/common/FastRational.h b/src/common/FastRational.h
index 7948137b..b99e17ef 100644
--- a/src/common/FastRational.h
+++ b/src/common/FastRational.h
@@ -11,6 +11,7 @@ Copyright (c) 2008, 2009 Centre national de la recherche scientifique (CNRS)
 #include <cassert>
 #include <climits>
 #include <cstdint>
+#include <mutex>
 #include <optional>
 #include <stack>
 #include <string>
@@ -75,6 +76,7 @@ class FastRational
 {
     class mpqPool
     {
+        std::mutex cs; // We use a mutex to make the pool thread-safe
         std::stack<mpq_class> store; // uses deque as storage to avoid realloc
         std::stack<mpq_ptr, std::vector<mpq_ptr>> pool;
     public:
diff --git a/src/logics/Logic.cc b/src/logics/Logic.cc
index 85f06522..ed42501b 100644
--- a/src/logics/Logic.cc
+++ b/src/logics/Logic.cc
@@ -9,6 +9,7 @@
 #include "Logic.h"
 #include "SubstLoopBreaker.h"
 
+#include <api/Interpret.h>
 #include <api/smt2tokens.h>
 #include <common/ApiException.h>
 #include <common/InternalException.h>
@@ -679,6 +680,18 @@ PTRef Logic::mkBoolVar(char const * name) {
     return mkFun(sr, {});
 }
 
+PTRef Logic::parseFormula(std::string input) {
+    SMTConfig config = SMTConfig();
+    Interpret repl = Interpret(config, *this);
+
+    int rval = repl.interpFile(input.data());
+    if (rval != 0) {
+        throw ApiException("Failed to parse input formula");
+    }
+
+    return repl.getParsedFormula();
+}
+
 void Logic::instantiateFunctions(SRef sr) {
     // Equality
     SymRef tr = declareFun_Commutative_NoScoping_Chainable(tk_equals, sort_BOOL, {sr, sr});
@@ -751,10 +764,8 @@ PTRef Logic::insertTerm(SymRef sym, vec<PTRef> && terms) {
         assert(terms.size() == 0);
         return mkFun(sym, std::move(terms));
     }
-    if (hasArrays()) {
-        if (isArrayStore(sym)) return mkStore(std::move(terms));
-        if (isArraySelect(sym)) return mkSelect(std::move(terms));
-    }
+    if (isArrayStore(sym)) return mkStore(std::move(terms));
+    if (isArraySelect(sym)) return mkSelect(std::move(terms));
     return mkUninterpFun(sym, std::move(terms));
 }
 
@@ -1344,6 +1355,9 @@ void Logic::collectStats(PTRef root, int & n_of_conn, int & n_of_eq, int & n_of_
     }
 }
 
+Sort const&       Logic::getSortDefinition (SRef s)     const { return sort_store[s]; }
+SortSymbol const& Logic::getSortSymbol     (SSymRef ss) const { return sort_store[ss]; }
+
 // Fetching sorts
 SRef Logic::getSortRef(PTRef const tr) const {
     return getSortRef(getPterm(tr).symb());
diff --git a/src/logics/Logic.h b/src/logics/Logic.h
index 9a144ee6..dc8ce747 100644
--- a/src/logics/Logic.h
+++ b/src/logics/Logic.h
@@ -59,6 +59,9 @@ public:
     bool hasIntegers() const { return QFLogicToProperties.at(logicType).arithProperty.hasInts; }
     bool hasReals() const { return QFLogicToProperties.at(logicType).arithProperty.hasReals; }
 
+    const Sort& getSortDefinition (SRef s) const;
+    const SortSymbol& getSortSymbol (SSymRef ss) const;
+
     SRef getSortRef(PTRef tr) const;
     SRef getSortRef(SymRef sr) const;
     std::string printSort(SRef s) const;
@@ -222,6 +225,8 @@ public:
     void dumpWithLets(std::ostream & out, PTRef formula) const;
     std::string dumpWithLets(PTRef formula) const;
 
+    PTRef parseFormula(std::string input);
+
     PTRef instantiateFunctionTemplate(TemplateFunction const & tmplt, vec<PTRef> const & args);
 
     SSymRef getSortSymIndexed() const { return sym_IndexedSort; }
diff --git a/src/symbols/SymStore.cc b/src/symbols/SymStore.cc
index 66cfa605..8573ac80 100644
--- a/src/symbols/SymStore.cc
+++ b/src/symbols/SymStore.cc
@@ -26,6 +26,7 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include "SymStore.h"
 #include "Symbol.h"
 
+#include <common/ApiException.h>
 #include <cstring>
 
 namespace opensmt {
@@ -54,6 +55,10 @@ SymRef SymStore::newSymb(char const * fname, SRef rsort, vec<SRef> const & args,
             }
         }
     }
+    if (symrefs != nullptr && !symConfig.isInterpreted) {
+        // Only builtin functions like "=" or "+" should be polymorphic
+        throw ApiException("Symbol `" + std::string(fname) + "` has conflicting definitions");
+    }
     bool newsym = (symrefs == nullptr);
     SymRef tr = ta.alloc(rsort, args, symConfig);
     SymId id = symbols.size();
