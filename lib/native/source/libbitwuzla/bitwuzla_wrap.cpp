// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#define SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : 0;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_BitwuzlaNativeJNI = NULL;
    jmethodID director_method_ids[1];
  }
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <bitwuzla/cpp/bitwuzla.h>
#include <bitwuzla/cpp/parser.h>

#include <string>
#include <sstream>

#include <cassert>


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(jint count,int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< int >(static_cast<std::vector< int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int_Sg__doSize(std::vector< int > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_0(std::vector< int > *self,std::vector< int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_1(std::vector< int > *self,jint index,std::vector< int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doRemove(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__doGet(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doSet(std::vector< int > *self,jint index,std::vector< int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sg__doRemoveRange(std::vector< int > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bitwuzla::Term > *new_std_vector_Sl_bitwuzla_Term_Sg___SWIG_2(jint count,bitwuzla::Term const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< bitwuzla::Term >(static_cast<std::vector< bitwuzla::Term >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_bitwuzla_Term_Sg__doSize(std::vector< bitwuzla::Term > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_bitwuzla_Term_Sg__doAdd__SWIG_0(std::vector< bitwuzla::Term > *self,std::vector< bitwuzla::Term >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_bitwuzla_Term_Sg__doAdd__SWIG_1(std::vector< bitwuzla::Term > *self,jint index,std::vector< bitwuzla::Term >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bitwuzla::Term >::value_type std_vector_Sl_bitwuzla_Term_Sg__doRemove(std::vector< bitwuzla::Term > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          bitwuzla::Term const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bitwuzla::Term >::value_type const &std_vector_Sl_bitwuzla_Term_Sg__doGet(std::vector< bitwuzla::Term > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< bitwuzla::Term >::value_type std_vector_Sl_bitwuzla_Term_Sg__doSet(std::vector< bitwuzla::Term > *self,jint index,std::vector< bitwuzla::Term >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          bitwuzla::Term const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_bitwuzla_Term_Sg__doRemoveRange(std::vector< bitwuzla::Term > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bitwuzla::Sort > *new_std_vector_Sl_bitwuzla_Sort_Sg___SWIG_2(jint count,bitwuzla::Sort const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< bitwuzla::Sort >(static_cast<std::vector< bitwuzla::Sort >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_bitwuzla_Sort_Sg__doSize(std::vector< bitwuzla::Sort > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_bitwuzla_Sort_Sg__doAdd__SWIG_0(std::vector< bitwuzla::Sort > *self,std::vector< bitwuzla::Sort >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_bitwuzla_Sort_Sg__doAdd__SWIG_1(std::vector< bitwuzla::Sort > *self,jint index,std::vector< bitwuzla::Sort >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bitwuzla::Sort >::value_type std_vector_Sl_bitwuzla_Sort_Sg__doRemove(std::vector< bitwuzla::Sort > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          bitwuzla::Sort const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< bitwuzla::Sort >::value_type const &std_vector_Sl_bitwuzla_Sort_Sg__doGet(std::vector< bitwuzla::Sort > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< bitwuzla::Sort >::value_type std_vector_Sl_bitwuzla_Sort_Sg__doSet(std::vector< bitwuzla::Sort > *self,jint index,std::vector< bitwuzla::Sort >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          bitwuzla::Sort const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_bitwuzla_Sort_Sg__doRemoveRange(std::vector< bitwuzla::Sort > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#include <unordered_map>
#include <stdexcept>

SWIGINTERN std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_getNextUnchecked(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *self){
          std::unordered_map< bitwuzla::Term, bitwuzla::Term >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_isNot(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const *self,std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator other){
          return (*self != other);
        }
SWIGINTERN bitwuzla::Term std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_getKey(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN bitwuzla::Term std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_getValue(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_setValue(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *self,bitwuzla::Term const &newValue){
          (*self)->second = newValue;
        }

  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__sizeImpl(std::unordered_map< bitwuzla::Term,bitwuzla::Term > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__containsImpl(std::unordered_map< bitwuzla::Term,bitwuzla::Term > *self,bitwuzla::Term const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__putUnchecked(std::unordered_map< bitwuzla::Term,bitwuzla::Term > *self,bitwuzla::Term const &key,bitwuzla::Term const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__removeUnchecked(std::unordered_map< bitwuzla::Term,bitwuzla::Term > *self,std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN void bitwuzla_Options_set__SWIG_3(bitwuzla::Options *self,bitwuzla::Option option,int value){
    self->set(option, value);
  }
SWIGINTERN int bitwuzla_Term_id(bitwuzla::Term *self){
    return (int) self->id();
  }
SWIGINTERN std::vector< int > bitwuzla_Term_indices(bitwuzla::Term *self){
    std::vector<int> result;
    for(auto v : self->indices()) {
      result.emplace_back(v);
    }
    return result;
  }
SWIGINTERN std::string bitwuzla_Term_symbol(bitwuzla::Term *self){
    return self->symbol().value();
  }
SWIGINTERN bool bitwuzla_Term_to_bool(bitwuzla::Term *self){
    assert(self->is_value() && self->sort().is_bool());
    return self->value<bool>();
  }
SWIGINTERN bitwuzla::RoundingMode bitwuzla_Term_to_rm(bitwuzla::Term *self){
    assert(self->is_value() && self->sort().is_rm());
    return self->value<bitwuzla::RoundingMode>();
  }
SWIGINTERN std::string bitwuzla_Term_to_bv(bitwuzla::Term *self){
    assert(self->is_value() && (self->sort().is_bv() || self->sort().is_fp()));
    return self->value<std::string>();
  }
SWIGINTERN int bitwuzla_Term_hashCode(bitwuzla::Term *self){
    std::hash<bitwuzla::Term> f;
    return (int) f(*self);
  }
SWIGINTERN bool bitwuzla_Term_isEqual(bitwuzla::Term *self,bitwuzla::Term other){
    return operator==(*self, other);
  }
SWIGINTERN int bitwuzla_Sort_id(bitwuzla::Sort *self){
    return (int) self->id();
  }
SWIGINTERN int bitwuzla_Sort_bv_size(bitwuzla::Sort *self){
    return (int) self->bv_size();
  }
SWIGINTERN int bitwuzla_Sort_fp_exp_size(bitwuzla::Sort *self){
    return (int) self->fp_exp_size();
  }
SWIGINTERN int bitwuzla_Sort_fp_sig_size(bitwuzla::Sort *self){
    return (int) self->fp_sig_size();
  }
SWIGINTERN int bitwuzla_Sort_fun_arity(bitwuzla::Sort *self){
    return (int) self->fun_arity();
  }
SWIGINTERN int bitwuzla_Sort_hashCode(bitwuzla::Sort *self){
    std::hash<bitwuzla::Sort> f;
    return (int) f(*self);
  }
SWIGINTERN bool bitwuzla_Sort_isEqual(bitwuzla::Sort *self,bitwuzla::Sort other){
    return operator==(*self, other);
  }
SWIGINTERN bitwuzla::Sort bitwuzla_TermManager_mk_bv_sort(bitwuzla::TermManager *self,int size){
    return self->mk_bv_sort(size);
  }
SWIGINTERN bitwuzla::Sort bitwuzla_TermManager_mk_fp_sort(bitwuzla::TermManager *self,int exp_size,int sig_size){
    return self->mk_fp_sort(exp_size, sig_size);
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_0(bitwuzla::TermManager *self,bitwuzla::Kind kind,bitwuzla::Term const &t1){
    return self->mk_term(kind, {t1}, {});
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_1(bitwuzla::TermManager *self,bitwuzla::Kind kind,bitwuzla::Term const &t1,int i1){
    return self->mk_term(kind, {t1}, {(uint64_t) i1});
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_2(bitwuzla::TermManager *self,bitwuzla::Kind kind,bitwuzla::Term const &t1,int i1,int i2){
    return self->mk_term(kind, {t1}, {(uint64_t) i1, (uint64_t) i2});
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_3(bitwuzla::TermManager *self,bitwuzla::Kind kind,bitwuzla::Term const &t1,bitwuzla::Term const &t2){
    return self->mk_term(kind, {t1, t2}, {});
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_4(bitwuzla::TermManager *self,bitwuzla::Kind kind,bitwuzla::Term const &t1,bitwuzla::Term const &t2,int i1){
    return self->mk_term(kind, {t1, t2}, {(uint64_t) i1});
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_5(bitwuzla::TermManager *self,bitwuzla::Kind kind,bitwuzla::Term const &t1,bitwuzla::Term const &t2,int i1,int i2){
    return self->mk_term(kind, {t1, t2}, {(uint64_t) i1, (uint64_t) i2});
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_6(bitwuzla::TermManager *self,bitwuzla::Kind kind,bitwuzla::Term const &t1,bitwuzla::Term const &t2,bitwuzla::Term const &t3){
    return self->mk_term(kind, {t1, t2, t3}, {});
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_term__SWIG_7(bitwuzla::TermManager *self,bitwuzla::Kind kind,std::vector< bitwuzla::Term > const &args,std::vector< int > const &indices){
    std::vector<uint64_t> unsigned_indices;
    for (auto i : indices) {
      unsigned_indices.emplace_back((uint64_t) i);
    }
    return self->mk_term(kind, args, unsigned_indices);
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_const(bitwuzla::TermManager *self,bitwuzla::Sort const &sort,std::string symbol){
    return self->mk_const(sort, symbol);
  }
SWIGINTERN bitwuzla::Term bitwuzla_TermManager_mk_var(bitwuzla::TermManager *self,bitwuzla::Sort const &sort,std::string symbol){
    return self->mk_var(sort, symbol);
  }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::string bitwuzla_Bitwuzla_print_formula(bitwuzla::Bitwuzla *self){
    std::ostringstream out;
    self->print_formula(out);
    return out.str();
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "bitwuzla_wrap.h"

SwigDirector_Terminator::SwigDirector_Terminator(JNIEnv *jenv) : bitwuzla::Terminator(), Swig::Director(jenv) {
}

SwigDirector_Terminator::~SwigDirector_Terminator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_Terminator::terminate() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method bitwuzla::Terminator::terminate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_BitwuzlaNativeJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in bitwuzla::Terminator::terminate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Terminator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "org/sosy_lab/java_smt/solvers/bitwuzla/api/Terminator");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "terminate", "()Z")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Int_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Int_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Int_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  try {
    result = std_vector_Sl_int_Sg__doSize((std::vector< int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_int_Sg__doAdd__SWIG_0(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Int_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_int_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Vector_1Int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1String_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1String_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1String_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1String_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Vector_1String(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Term_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Term > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bitwuzla::Term > *)new std::vector< bitwuzla::Term >();
  *(std::vector< bitwuzla::Term > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Term_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Term > *arg1 = 0 ;
  std::vector< bitwuzla::Term > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Term > const & is null");
    return 0;
  } 
  result = (std::vector< bitwuzla::Term > *)new std::vector< bitwuzla::Term >((std::vector< bitwuzla::Term > const &)*arg1);
  *(std::vector< bitwuzla::Term > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  std::vector< bitwuzla::Term >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  result = ((std::vector< bitwuzla::Term > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  std::vector< bitwuzla::Term >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  arg2 = (std::vector< bitwuzla::Term >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  result = (bool)((std::vector< bitwuzla::Term > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Term_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  bitwuzla::Term *arg2 = 0 ;
  std::vector< bitwuzla::Term > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  try {
    result = (std::vector< bitwuzla::Term > *)new_std_vector_Sl_bitwuzla_Term_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(bitwuzla::Term const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Term > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  try {
    result = std_vector_Sl_bitwuzla_Term_Sg__doSize((std::vector< bitwuzla::Term > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  std::vector< bitwuzla::Term >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  arg2 = *(std::vector< bitwuzla::Term >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Term >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_bitwuzla_Term_Sg__doAdd__SWIG_0(arg1,(bitwuzla::Term const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Term >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bitwuzla::Term >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Term >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_bitwuzla_Term_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(bitwuzla::Term const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Term >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_bitwuzla_Term_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Term >::value_type **)&jresult = new std::vector< bitwuzla::Term >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Term >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< bitwuzla::Term >::value_type *) &std_vector_Sl_bitwuzla_Term_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Term >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Term >::value_type *arg3 = 0 ;
  std::vector< bitwuzla::Term >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bitwuzla::Term >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Term >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_bitwuzla_Term_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(bitwuzla::Term const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Term >::value_type **)&jresult = new std::vector< bitwuzla::Term >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Term_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_bitwuzla_Term_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Vector_1Term(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bitwuzla::Term > *arg1 = (std::vector< bitwuzla::Term > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bitwuzla::Term > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Sort_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Sort > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bitwuzla::Sort > *)new std::vector< bitwuzla::Sort >();
  *(std::vector< bitwuzla::Sort > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Sort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Sort > *arg1 = 0 ;
  std::vector< bitwuzla::Sort > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Sort > const & is null");
    return 0;
  } 
  result = (std::vector< bitwuzla::Sort > *)new std::vector< bitwuzla::Sort >((std::vector< bitwuzla::Sort > const &)*arg1);
  *(std::vector< bitwuzla::Sort > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  std::vector< bitwuzla::Sort >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  result = ((std::vector< bitwuzla::Sort > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  std::vector< bitwuzla::Sort >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  arg2 = (std::vector< bitwuzla::Sort >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  result = (bool)((std::vector< bitwuzla::Sort > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Vector_1Sort_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  bitwuzla::Sort *arg2 = 0 ;
  std::vector< bitwuzla::Sort > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  try {
    result = (std::vector< bitwuzla::Sort > *)new_std_vector_Sl_bitwuzla_Sort_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(bitwuzla::Sort const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Sort > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  try {
    result = std_vector_Sl_bitwuzla_Sort_Sg__doSize((std::vector< bitwuzla::Sort > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  std::vector< bitwuzla::Sort >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  arg2 = *(std::vector< bitwuzla::Sort >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Sort >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_bitwuzla_Sort_Sg__doAdd__SWIG_0(arg1,(bitwuzla::Sort const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Sort >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bitwuzla::Sort >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Sort >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_bitwuzla_Sort_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(bitwuzla::Sort const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Sort >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_bitwuzla_Sort_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Sort >::value_type **)&jresult = new std::vector< bitwuzla::Sort >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Sort >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< bitwuzla::Sort >::value_type *) &std_vector_Sl_bitwuzla_Sort_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Sort >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  jint arg2 ;
  std::vector< bitwuzla::Sort >::value_type *arg3 = 0 ;
  std::vector< bitwuzla::Sort >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< bitwuzla::Sort >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Sort >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_bitwuzla_Sort_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(bitwuzla::Sort const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< bitwuzla::Sort >::value_type **)&jresult = new std::vector< bitwuzla::Sort >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Vector_1Sort_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_bitwuzla_Sort_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Vector_1Sort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bitwuzla::Sort > *arg1 = (std::vector< bitwuzla::Sort > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bitwuzla::Sort > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Map_1TermTerm_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *)new std::unordered_map< bitwuzla::Term,bitwuzla::Term >();
  *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Map_1TermTerm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_map< bitwuzla::Term,bitwuzla::Term > const & is null");
    return 0;
  } 
  result = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *)new std::unordered_map< bitwuzla::Term,bitwuzla::Term >((std::unordered_map< bitwuzla::Term,bitwuzla::Term > const &)*arg1);
  *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *) 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_getNextUnchecked(arg1);
  *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jresult = new std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *) 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator arg2 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg1; 
  argp2 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_isNot((std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *) 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_getKey((std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const *)arg1);
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *) 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_getValue((std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const *)arg1);
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg1; 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return ;
  } 
  std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__iterator_setValue(arg1,(bitwuzla::Term const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Map_1TermTerm_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  result = (bool)((std::unordered_map< bitwuzla::Term,bitwuzla::Term > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  result = (arg1)->find((bitwuzla::Term const &)*arg2);
  *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jresult = new std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  result = (arg1)->begin();
  *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jresult = new std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  result = (arg1)->end();
  *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jresult = new std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  try {
    result = std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__sizeImpl((std::unordered_map< bitwuzla::Term,bitwuzla::Term > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  result = (bool)std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__containsImpl(arg1,(bitwuzla::Term const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  bitwuzla::Term *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return ;
  } 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return ;
  } 
  std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__putUnchecked(arg1,(bitwuzla::Term const &)*arg2,(bitwuzla::Term const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Map_1TermTerm_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator arg2 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  argp2 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< bitwuzla::Term,bitwuzla::Term >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_unordered_map_Sl_bitwuzla_Term_Sc_bitwuzla_Term_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Map_1TermTerm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg1 = (std::unordered_map< bitwuzla::Term,bitwuzla::Term > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Result_1SAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::Result result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Result)bitwuzla::Result::SAT;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Result_1UNSAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::Result result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Result)bitwuzla::Result::UNSAT;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Result_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::Result result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Result)bitwuzla::Result::UNKNOWN;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_RoundingMode_1RNE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::RoundingMode result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::RoundingMode)bitwuzla::RoundingMode::RNE;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_RoundingMode_1RNA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::RoundingMode result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::RoundingMode)bitwuzla::RoundingMode::RNA;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_RoundingMode_1RTN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::RoundingMode result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::RoundingMode)bitwuzla::RoundingMode::RTN;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_RoundingMode_1RTP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::RoundingMode result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::RoundingMode)bitwuzla::RoundingMode::RTP;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_RoundingMode_1RTZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::RoundingMode result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::RoundingMode)bitwuzla::RoundingMode::RTZ;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Kind_1CONSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  bitwuzla::Kind result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Kind)bitwuzla::Kind::CONSTANT;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_copyright(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (char *)bitwuzla::copyright();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (char *)bitwuzla::version();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_git_1id(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (char *)bitwuzla::git_id();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Options_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bitwuzla::Options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Options *)new bitwuzla::Options();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Options(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Options_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Options *arg1 = 0 ;
  bitwuzla::Options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Options const & is null");
    return 0;
  } 
  {
    try {
      result = (bitwuzla::Options *)new bitwuzla::Options((bitwuzla::Options const &)*arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)((bitwuzla::Options const *)arg1)->is_valid((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1is_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (bool)((bitwuzla::Options const *)arg1)->is_bool(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1is_1numeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (bool)((bitwuzla::Options const *)arg1)->is_numeric(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1is_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (bool)((bitwuzla::Options const *)arg1)->is_mode(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1shrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (char *)((bitwuzla::Options const *)arg1)->shrt(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1lng(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (char *)((bitwuzla::Options const *)arg1)->lng(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (char *)((bitwuzla::Options const *)arg1)->description(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1modes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = ((bitwuzla::Options const *)arg1)->modes(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  char *arg2 = (char *) 0 ;
  bitwuzla::Option result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (bitwuzla::Option)((bitwuzla::Options const *)arg1)->option((char const *)arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->set(arg2,(std::string const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->set((std::string const &)*arg2,(std::string const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & is null");
    return ;
  } 
  {
    try {
      (arg1)->set((std::vector< std::string > const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jobject JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (uint64_t)((bitwuzla::Options const *)arg1)->get(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1get_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  {
    try {
      result = (std::string *) &((bitwuzla::Options const *)arg1)->get_mode(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Options_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  bitwuzla::Options *arg1 = (bitwuzla::Options *) 0 ;
  bitwuzla::Option arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Options **)&jarg1; 
  arg2 = (bitwuzla::Option)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      bitwuzla_Options_set__SWIG_3(arg1,arg2,arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Term(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bitwuzla::Term *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Term *)new bitwuzla::Term();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Term(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1null(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_null();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bitwuzla::Kind result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bitwuzla::Kind)((bitwuzla::Term const *)arg1)->kind();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Term const *)arg1)->sort();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1num_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Term const *)arg1)->num_children();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  std::vector< bitwuzla::Term > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Term const *)arg1)->children();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< bitwuzla::Term > **)&jresult = new std::vector< bitwuzla::Term >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  size_t arg2 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((bitwuzla::Term const *)arg1)->operator [](arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1num_1indices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Term const *)arg1)->num_indices();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_const();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1variable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_variable();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_value();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1true(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_true();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1false(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_false();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1bv_1value_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_bv_value_zero();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1bv_1value_1one(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_bv_value_one();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1bv_1value_1ones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_bv_value_ones();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1bv_1value_1min_1signed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_bv_value_min_signed();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1bv_1value_1max_1signed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_bv_value_max_signed();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1fp_1value_1pos_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_fp_value_pos_zero();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1fp_1value_1neg_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_fp_value_neg_zero();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1fp_1value_1pos_1inf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_fp_value_pos_inf();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1fp_1value_1neg_1inf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_fp_value_neg_inf();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1fp_1value_1nan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_fp_value_nan();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1rm_1value_1rna(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_rm_value_rna();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1rm_1value_1rne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_rm_value_rne();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1rm_1value_1rtn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_rm_value_rtn();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1rm_1value_1rtp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_rm_value_rtp();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1is_1rm_1value_1rtz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Term const *)arg1)->is_rm_value_rtz();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jstring jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  uint8_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    try {
      result = ((bitwuzla::Term const *)arg1)->str(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Term const *)arg1)->str();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Term_id(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1indices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = bitwuzla_Term_indices(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = bitwuzla_Term_symbol(arg1);
    } catch(std::bad_optional_access& e) {
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1to_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bool)bitwuzla_Term_to_bool(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1to_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bitwuzla::RoundingMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (bitwuzla::RoundingMode)bitwuzla_Term_to_rm(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1to_1bv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = bitwuzla_Term_to_bv(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Term_hashCode(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Term_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bitwuzla::Term *arg1 = (bitwuzla::Term *) 0 ;
  bitwuzla::Term arg2 ;
  bitwuzla::Term *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::Term **)&jarg1; 
  argp2 = *(bitwuzla::Term **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null bitwuzla::Term");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)bitwuzla_Term_isEqual(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Sort(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bitwuzla::Sort *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Sort *)new bitwuzla::Sort();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Sort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1is_1null(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Sort const *)arg1)->is_null();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1array_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Sort const *)arg1)->array_index();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1array_1element(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Sort const *)arg1)->array_element();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1fun_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  std::vector< bitwuzla::Sort > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Sort const *)arg1)->fun_domain();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< bitwuzla::Sort > **)&jresult = new std::vector< bitwuzla::Sort >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1fun_1codomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Sort const *)arg1)->fun_codomain();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1is_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Sort const *)arg1)->is_array();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1is_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Sort const *)arg1)->is_bool();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1is_1bv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Sort const *)arg1)->is_bv();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1is_1fp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Sort const *)arg1)->is_fp();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1is_1fun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Sort const *)arg1)->is_fun();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1is_1rm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (bool)((bitwuzla::Sort const *)arg1)->is_rm();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = ((bitwuzla::Sort const *)arg1)->str();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Sort_id(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1bv_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Sort_bv_size(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1fp_1exp_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Sort_fp_exp_size(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1fp_1sig_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Sort_fp_sig_size(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1fun_1arity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Sort_fun_arity(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1hashCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  {
    try {
      result = (int)bitwuzla_Sort_hashCode(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Sort_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  bitwuzla::Sort *arg1 = (bitwuzla::Sort *) 0 ;
  bitwuzla::Sort arg2 ;
  bitwuzla::Sort *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::Sort **)&jarg1; 
  argp2 = *(bitwuzla::Sort **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null bitwuzla::Sort");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)bitwuzla_Sort_isEqual(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Terminator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bitwuzla::Terminator *arg1 = (bitwuzla::Terminator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bitwuzla::Terminator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Terminator_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bitwuzla::Terminator *arg1 = (bitwuzla::Terminator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::Terminator **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->terminate();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Terminator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bitwuzla::Terminator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::Terminator *)new SwigDirector_Terminator(jenv);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Terminator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Terminator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  bitwuzla::Terminator *obj = *((bitwuzla::Terminator **)&objarg);
  (void)jcls;
  SwigDirector_Terminator *director = static_cast<SwigDirector_Terminator *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Terminator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  bitwuzla::Terminator *obj = *((bitwuzla::Terminator **)&objarg);
  SwigDirector_Terminator *director = dynamic_cast<SwigDirector_Terminator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1TermManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bitwuzla::TermManager *)new bitwuzla::TermManager();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::TermManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1TermManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1array_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Sort *arg3 = 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  arg3 = *(bitwuzla::Sort **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_array_sort((bitwuzla::Sort const &)*arg2,(bitwuzla::Sort const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bool_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  {
    try {
      result = (arg1)->mk_bool_sort();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fun_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  std::vector< bitwuzla::Sort > *arg2 = 0 ;
  bitwuzla::Sort *arg3 = 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(std::vector< bitwuzla::Sort > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Sort > const & is null");
    return 0;
  } 
  arg3 = *(bitwuzla::Sort **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_fun_sort((std::vector< bitwuzla::Sort > const &)*arg2,(bitwuzla::Sort const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1true(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  {
    try {
      result = (arg1)->mk_true();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1false(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  {
    try {
      result = (arg1)->mk_false();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_bv_zero((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1one(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_bv_one((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1ones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_bv_ones((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1min_1signed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_bv_min_signed((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1max_1signed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_bv_max_signed((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint8_t arg4 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (uint8_t)jarg4; 
  {
    try {
      result = (arg1)->mk_bv_value((bitwuzla::Sort const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->mk_bv_value((bitwuzla::Sort const &)*arg2,(std::string const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1value_1uint64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  uint64_t arg3 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (arg1)->mk_bv_value_uint64((bitwuzla::Sort const &)*arg2,arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1value_1int64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  int64_t arg3 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  arg3 = (int64_t)jarg3; 
  {
    try {
      result = (arg1)->mk_bv_value_int64((bitwuzla::Sort const &)*arg2,arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1pos_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_fp_pos_zero((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1neg_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_fp_neg_zero((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1pos_1inf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_fp_pos_inf((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1neg_1inf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_fp_neg_inf((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1nan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_fp_nan((bitwuzla::Sort const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  bitwuzla::Term *arg3 = 0 ;
  bitwuzla::Term *arg4 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg4 = *(bitwuzla::Term **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_fp_value((bitwuzla::Term const &)*arg2,(bitwuzla::Term const &)*arg3,(bitwuzla::Term const &)*arg4);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (arg1)->mk_fp_value((bitwuzla::Sort const &)*arg2,(bitwuzla::Term const &)*arg3,(std::string const &)*arg4);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1value_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (arg1)->mk_fp_value((bitwuzla::Sort const &)*arg2,(bitwuzla::Term const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1const_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  bitwuzla::Term *arg3 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->mk_const_array((bitwuzla::Sort const &)*arg2,(bitwuzla::Term const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1rm_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::RoundingMode arg2 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::RoundingMode)jarg2; 
  {
    try {
      result = (arg1)->mk_rm_value(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1substitute_1term(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg3 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg3 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_map< bitwuzla::Term,bitwuzla::Term > const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->substitute_term((bitwuzla::Term const &)*arg2,(std::unordered_map< bitwuzla::Term,bitwuzla::Term > const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1substitute_1terms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  std::vector< bitwuzla::Term > *arg2 = 0 ;
  std::unordered_map< bitwuzla::Term,bitwuzla::Term > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(std::vector< bitwuzla::Term > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Term > & is null");
    return ;
  } 
  arg3 = *(std::unordered_map< bitwuzla::Term,bitwuzla::Term > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_map< bitwuzla::Term,bitwuzla::Term > const & is null");
    return ;
  } 
  {
    try {
      (arg1)->substitute_terms(*arg2,(std::unordered_map< bitwuzla::Term,bitwuzla::Term > const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1bv_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  int arg2 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = bitwuzla_TermManager_mk_bv_sort(arg1,arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1fp_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = bitwuzla_TermManager_mk_fp_sort(arg1,arg2,arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  bitwuzla::Term *arg3 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_0(arg1,arg2,(bitwuzla::Term const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  bitwuzla::Term *arg3 = 0 ;
  int arg4 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_1(arg1,arg2,(bitwuzla::Term const &)*arg3,arg4);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  bitwuzla::Term *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_2(arg1,arg2,(bitwuzla::Term const &)*arg3,arg4,arg5);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  bitwuzla::Term *arg3 = 0 ;
  bitwuzla::Term *arg4 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg4 = *(bitwuzla::Term **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_3(arg1,arg2,(bitwuzla::Term const &)*arg3,(bitwuzla::Term const &)*arg4);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  bitwuzla::Term *arg3 = 0 ;
  bitwuzla::Term *arg4 = 0 ;
  int arg5 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg4 = *(bitwuzla::Term **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg5 = (int)jarg5; 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_4(arg1,arg2,(bitwuzla::Term const &)*arg3,(bitwuzla::Term const &)*arg4,arg5);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  bitwuzla::Term *arg3 = 0 ;
  bitwuzla::Term *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg4 = *(bitwuzla::Term **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_5(arg1,arg2,(bitwuzla::Term const &)*arg3,(bitwuzla::Term const &)*arg4,arg5,arg6);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  bitwuzla::Term *arg3 = 0 ;
  bitwuzla::Term *arg4 = 0 ;
  bitwuzla::Term *arg5 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(bitwuzla::Term **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg4 = *(bitwuzla::Term **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  arg5 = *(bitwuzla::Term **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_6(arg1,arg2,(bitwuzla::Term const &)*arg3,(bitwuzla::Term const &)*arg4,(bitwuzla::Term const &)*arg5);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1term_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Kind arg2 ;
  std::vector< bitwuzla::Term > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = (bitwuzla::Kind)jarg2; 
  arg3 = *(std::vector< bitwuzla::Term > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Term > const & is null");
    return 0;
  } 
  arg4 = *(std::vector< int > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return 0;
  } 
  {
    try {
      result = bitwuzla_TermManager_mk_term__SWIG_7(arg1,arg2,(std::vector< bitwuzla::Term > const &)*arg3,(std::vector< int > const &)*arg4);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  std::string arg3 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = bitwuzla_TermManager_mk_const(arg1,(bitwuzla::Sort const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_TermManager_1mk_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = (bitwuzla::TermManager *) 0 ;
  bitwuzla::Sort *arg2 = 0 ;
  std::string arg3 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1; 
  arg2 = *(bitwuzla::Sort **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Sort const & is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = bitwuzla_TermManager_mk_var(arg1,(bitwuzla::Sort const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Bitwuzla_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = 0 ;
  bitwuzla::Options *arg2 = 0 ;
  bitwuzla::Bitwuzla *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::TermManager & is null");
    return 0;
  } 
  arg2 = *(bitwuzla::Options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Options const & is null");
    return 0;
  } 
  {
    try {
      result = (bitwuzla::Bitwuzla *)new bitwuzla::Bitwuzla(*arg1,(bitwuzla::Options const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  
  *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jresult = result ? new std::shared_ptr<  bitwuzla::Bitwuzla >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Bitwuzla_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = 0 ;
  bitwuzla::Bitwuzla *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::TermManager **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::TermManager & is null");
    return 0;
  } 
  {
    try {
      result = (bitwuzla::Bitwuzla *)new bitwuzla::Bitwuzla(*arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  
  *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jresult = result ? new std::shared_ptr<  bitwuzla::Bitwuzla >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Bitwuzla(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1configure_1terminator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  bitwuzla::Terminator *arg2 = (bitwuzla::Terminator *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(bitwuzla::Terminator **)&jarg2; 
  {
    try {
      (arg1)->configure_terminator(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1push(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->push(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1pop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  uint32_t arg2 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->pop(arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1assert_1formula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return ;
  } 
  {
    try {
      (arg1)->assert_formula((bitwuzla::Term const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1get_1assertions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  std::vector< bitwuzla::Term > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_assertions();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< bitwuzla::Term > **)&jresult = new std::vector< bitwuzla::Term >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1get_1unsat_1assumptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  std::vector< bitwuzla::Term > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_unsat_assumptions();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< bitwuzla::Term > **)&jresult = new std::vector< bitwuzla::Term >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1get_1unsat_1core(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  std::vector< bitwuzla::Term > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_unsat_core();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< bitwuzla::Term > **)&jresult = new std::vector< bitwuzla::Term >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->simplify((bitwuzla::Term const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1check_1sat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::vector< bitwuzla::Term > *arg2 = 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  bitwuzla::Result result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< bitwuzla::Term > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bitwuzla::Term > const & is null");
    return 0;
  } 
  {
    try {
      result = (bitwuzla::Result)(arg1)->check_sat((std::vector< bitwuzla::Term > const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1check_1sat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  bitwuzla::Result result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bitwuzla::Result)(arg1)->check_sat();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  bitwuzla::Term *arg2 = 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(bitwuzla::Term **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Term const & is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->get_value((bitwuzla::Term const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1term_1mgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  bitwuzla::TermManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bitwuzla::TermManager *) &(arg1)->term_mgr();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::TermManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Bitwuzla_1print_1formula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  bitwuzla::Bitwuzla *arg1 = (bitwuzla::Bitwuzla *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  bitwuzla::Bitwuzla > **)&jarg1;
  arg1 = (bitwuzla::Bitwuzla *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = bitwuzla_Bitwuzla_print_formula(arg1);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Parser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = 0 ;
  bitwuzla::Options *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bitwuzla::parser::Parser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::TermManager & is null");
    return 0;
  } 
  arg2 = *(bitwuzla::Options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Options & is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (bitwuzla::parser::Parser *)new bitwuzla::parser::Parser(*arg1,*arg2,(std::string const &)*arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::parser::Parser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_new_1Parser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  bitwuzla::TermManager *arg1 = 0 ;
  bitwuzla::Options *arg2 = 0 ;
  bitwuzla::parser::Parser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(bitwuzla::TermManager **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::TermManager & is null");
    return 0;
  } 
  arg2 = *(bitwuzla::Options **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bitwuzla::Options & is null");
    return 0;
  } 
  {
    try {
      result = (bitwuzla::parser::Parser *)new bitwuzla::parser::Parser(*arg1,*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::parser::Parser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_delete_1Parser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1parse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->parse((std::string const &)*arg2,arg3,arg4);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1parse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->parse((std::string const &)*arg2,arg3);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1parse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->parse((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1parse_1term(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::string *arg2 = 0 ;
  bitwuzla::Term result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->parse_term((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Term **)&jresult = new bitwuzla::Term(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1parse_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::string *arg2 = 0 ;
  bitwuzla::Sort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->parse_sort((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(bitwuzla::Sort **)&jresult = new bitwuzla::Sort(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1get_1declared_1sorts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::vector< bitwuzla::Sort > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  {
    try {
      result = ((bitwuzla::parser::Parser const *)arg1)->get_declared_sorts();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< bitwuzla::Sort > **)&jresult = new std::vector< bitwuzla::Sort >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1get_1declared_1funs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::vector< bitwuzla::Term > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  {
    try {
      result = ((bitwuzla::parser::Parser const *)arg1)->get_declared_funs();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::vector< bitwuzla::Term > **)&jresult = new std::vector< bitwuzla::Term >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_Parser_1bitwuzla(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bitwuzla::parser::Parser *arg1 = (bitwuzla::parser::Parser *) 0 ;
  std::shared_ptr< bitwuzla::Bitwuzla > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bitwuzla::parser::Parser **)&jarg1; 
  {
    try {
      result = (arg1)->bitwuzla();
    } catch(std::exception& e) {
      jclass exceptionType = jenv->FindClass("java/lang/IllegalArgumentException");
      jenv->ThrowNew(exceptionType, e.what());
      return 0;
    }
  }
  *(std::shared_ptr< bitwuzla::Bitwuzla > **)&jresult = result ? new std::shared_ptr< bitwuzla::Bitwuzla >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_bitwuzla_api_BitwuzlaNativeJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[1] = {
    {
      "SwigDirector_Terminator_terminate", "(Lorg/sosy_lab/java_smt/solvers/bitwuzla/api/Terminator;)Z" 
    }
  };
  Swig::jclass_BitwuzlaNativeJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_BitwuzlaNativeJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

