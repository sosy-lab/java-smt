// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sosy_lab.java_smt.solvers.bitwuzla.api;

public class Map_TermTerm extends java.util.AbstractMap<Term, Term> {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Map_TermTerm(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Map_TermTerm obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Map_TermTerm obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Map_TermTerm(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  public int size() {
    return sizeImpl();
  }

  public boolean containsKey(java.lang.Object key) {
    if (!(key instanceof Term)) {
      return false;
    }

    return containsImpl((Term)key);
  }

  public Term get(java.lang.Object key) {
    if (!(key instanceof Term)) {
      return null;
    }

    Iterator itr = find((Term) key);
    if (itr.isNot(end())) {
      return itr.getValue();
    }

    return null;
  }

  public Term put(Term key, Term value) {
    Iterator itr = find((Term) key);
    if (itr.isNot(end())) {
      Term oldValue = itr.getValue();
      itr.setValue(value);
      return oldValue;
    } else {
      putUnchecked(key, value);
      return null;
    }
  }

  public Term remove(java.lang.Object key) {
    if (!(key instanceof Term)) {
      return null;
    }

    Iterator itr = find((Term) key);
    if (itr.isNot(end())) {
      Term oldValue = itr.getValue();
      removeUnchecked(itr);
      return oldValue;
    } else {
      return null;
    }
  }

  public java.util.Set<Entry<Term, Term>> entrySet() {
    java.util.Set<Entry<Term, Term>> setToReturn =
        new java.util.HashSet<Entry<Term, Term>>();

    Iterator itr = begin();
    final Iterator end = end();
    while (itr.isNot(end)) {
      setToReturn.add(new Entry<Term, Term>() {
        private Iterator iterator;

        private Entry<Term, Term> init(Iterator iterator) {
          this.iterator = iterator;
          return this;
        }

        public Term getKey() {
          return iterator.getKey();
        }

        public Term getValue() {
          return iterator.getValue();
        }

        public Term setValue(Term newValue) {
          Term oldValue = iterator.getValue();
          iterator.setValue(newValue);
          return oldValue;
        }
      }.init(itr));
      itr = itr.getNextUnchecked();
    }

    return setToReturn;
  }

  public Map_TermTerm() {
    this(BitwuzlaNativeJNI.new_Map_TermTerm__SWIG_0(), true);
  }

  public Map_TermTerm(Map_TermTerm other) {
    this(BitwuzlaNativeJNI.new_Map_TermTerm__SWIG_1(Map_TermTerm.getCPtr(other), other), true);
  }

  static protected class Iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected static long swigRelease(Iterator obj) {
      long ptr = 0;
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new RuntimeException("Cannot release ownership as memory is not owned");
        ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.delete();
      }
      return ptr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BitwuzlaNativeJNI.delete_Map_TermTerm_Iterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    private Map_TermTerm.Iterator getNextUnchecked() {
      return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_Iterator_getNextUnchecked(swigCPtr, this), true);
    }
  
    private boolean isNot(Map_TermTerm.Iterator other) {
      return BitwuzlaNativeJNI.Map_TermTerm_Iterator_isNot(swigCPtr, this, Map_TermTerm.Iterator.getCPtr(other), other);
    }
  
    private Term getKey() {
      return new Term(BitwuzlaNativeJNI.Map_TermTerm_Iterator_getKey(swigCPtr, this), true);
    }
  
    private Term getValue() {
      return new Term(BitwuzlaNativeJNI.Map_TermTerm_Iterator_getValue(swigCPtr, this), true);
    }
  
    private void setValue(Term newValue) {
      BitwuzlaNativeJNI.Map_TermTerm_Iterator_setValue(swigCPtr, this, Term.getCPtr(newValue), newValue);
    }
  
  }

  public boolean isEmpty() {
    return BitwuzlaNativeJNI.Map_TermTerm_isEmpty(swigCPtr, this);
  }

  public void clear() {
    BitwuzlaNativeJNI.Map_TermTerm_clear(swigCPtr, this);
  }

  private Map_TermTerm.Iterator find(Term key) {
    return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_find(swigCPtr, this, Term.getCPtr(key), key), true);
  }

  private Map_TermTerm.Iterator begin() {
    return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_begin(swigCPtr, this), true);
  }

  private Map_TermTerm.Iterator end() {
    return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_end(swigCPtr, this), true);
  }

  private int sizeImpl() {
    return BitwuzlaNativeJNI.Map_TermTerm_sizeImpl(swigCPtr, this);
  }

  private boolean containsImpl(Term key) {
    return BitwuzlaNativeJNI.Map_TermTerm_containsImpl(swigCPtr, this, Term.getCPtr(key), key);
  }

  private void putUnchecked(Term key, Term value) {
    BitwuzlaNativeJNI.Map_TermTerm_putUnchecked(swigCPtr, this, Term.getCPtr(key), key, Term.getCPtr(value), value);
  }

  private void removeUnchecked(Map_TermTerm.Iterator itr) {
    BitwuzlaNativeJNI.Map_TermTerm_removeUnchecked(swigCPtr, this, Map_TermTerm.Iterator.getCPtr(itr), itr);
  }

}
