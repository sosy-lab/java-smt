// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sosy_lab.java_smt.solvers.bitwuzla.api;

public final class Option {
  public final static Option LOGLEVEL = new Option("LOGLEVEL");
  public final static Option PRODUCE_MODELS = new Option("PRODUCE_MODELS");
  public final static Option PRODUCE_UNSAT_ASSUMPTIONS = new Option("PRODUCE_UNSAT_ASSUMPTIONS");
  public final static Option PRODUCE_UNSAT_CORES = new Option("PRODUCE_UNSAT_CORES");
  public final static Option SEED = new Option("SEED");
  public final static Option VERBOSITY = new Option("VERBOSITY");
  public final static Option TIME_LIMIT_PER = new Option("TIME_LIMIT_PER");
  public final static Option MEMORY_LIMIT = new Option("MEMORY_LIMIT");
  public final static Option NTHREADS = new Option("NTHREADS");
  public final static Option RELEVANT_TERMS = new Option("RELEVANT_TERMS");
  public final static Option BV_SOLVER = new Option("BV_SOLVER");
  public final static Option REWRITE_LEVEL = new Option("REWRITE_LEVEL");
  public final static Option SAT_SOLVER = new Option("SAT_SOLVER");
  public final static Option PROP_CONST_BITS = new Option("PROP_CONST_BITS");
  public final static Option PROP_INFER_INEQ_BOUNDS = new Option("PROP_INFER_INEQ_BOUNDS");
  public final static Option PROP_NPROPS = new Option("PROP_NPROPS");
  public final static Option PROP_NUPDATES = new Option("PROP_NUPDATES");
  public final static Option PROP_OPT_LT_CONCAT_SEXT = new Option("PROP_OPT_LT_CONCAT_SEXT");
  public final static Option PROP_PATH_SEL = new Option("PROP_PATH_SEL");
  public final static Option PROP_PROB_RANDOM_INPUT = new Option("PROP_PROB_RANDOM_INPUT");
  public final static Option PROP_PROB_USE_INV_VALUE = new Option("PROP_PROB_USE_INV_VALUE");
  public final static Option PROP_SEXT = new Option("PROP_SEXT");
  public final static Option PROP_NORMALIZE = new Option("PROP_NORMALIZE");
  public final static Option ABSTRACTION = new Option("ABSTRACTION");
  public final static Option ABSTRACTION_BV_SIZE = new Option("ABSTRACTION_BV_SIZE");
  public final static Option ABSTRACTION_EAGER_REFINE = new Option("ABSTRACTION_EAGER_REFINE");
  public final static Option ABSTRACTION_VALUE_LIMIT = new Option("ABSTRACTION_VALUE_LIMIT");
  public final static Option ABSTRACTION_VALUE_ONLY = new Option("ABSTRACTION_VALUE_ONLY");
  public final static Option ABSTRACTION_ASSERT = new Option("ABSTRACTION_ASSERT");
  public final static Option ABSTRACTION_ASSERT_REFS = new Option("ABSTRACTION_ASSERT_REFS");
  public final static Option ABSTRACTION_INITIAL_LEMMAS = new Option("ABSTRACTION_INITIAL_LEMMAS");
  public final static Option ABSTRACTION_INC_BITBLAST = new Option("ABSTRACTION_INC_BITBLAST");
  public final static Option ABSTRACTION_BV_ADD = new Option("ABSTRACTION_BV_ADD");
  public final static Option ABSTRACTION_BV_MUL = new Option("ABSTRACTION_BV_MUL");
  public final static Option ABSTRACTION_BV_UDIV = new Option("ABSTRACTION_BV_UDIV");
  public final static Option ABSTRACTION_BV_UREM = new Option("ABSTRACTION_BV_UREM");
  public final static Option ABSTRACTION_EQUAL = new Option("ABSTRACTION_EQUAL");
  public final static Option ABSTRACTION_ITE = new Option("ABSTRACTION_ITE");
  public final static Option PREPROCESS = new Option("PREPROCESS");
  public final static Option PP_CONTRADICTING_ANDS = new Option("PP_CONTRADICTING_ANDS");
  public final static Option PP_ELIM_BV_EXTRACTS = new Option("PP_ELIM_BV_EXTRACTS");
  public final static Option PP_ELIM_BV_UDIV = new Option("PP_ELIM_BV_UDIV");
  public final static Option PP_EMBEDDED_CONSTR = new Option("PP_EMBEDDED_CONSTR");
  public final static Option PP_FLATTEN_AND = new Option("PP_FLATTEN_AND");
  public final static Option PP_NORMALIZE = new Option("PP_NORMALIZE");
  public final static Option PP_SKELETON_PREPROC = new Option("PP_SKELETON_PREPROC");
  public final static Option PP_VARIABLE_SUBST = new Option("PP_VARIABLE_SUBST");
  public final static Option PP_VARIABLE_SUBST_NORM_EQ = new Option("PP_VARIABLE_SUBST_NORM_EQ");
  public final static Option PP_VARIABLE_SUBST_NORM_DISEQ = new Option("PP_VARIABLE_SUBST_NORM_DISEQ");
  public final static Option PP_VARIABLE_SUBST_NORM_BV_INEQ = new Option("PP_VARIABLE_SUBST_NORM_BV_INEQ");
  public final static Option DBG_RW_NODE_THRESH = new Option("DBG_RW_NODE_THRESH");
  public final static Option DBG_PP_NODE_THRESH = new Option("DBG_PP_NODE_THRESH");
  public final static Option DBG_CHECK_MODEL = new Option("DBG_CHECK_MODEL");
  public final static Option DBG_CHECK_UNSAT_CORE = new Option("DBG_CHECK_UNSAT_CORE");
  public final static Option NUM_OPTS = new Option("NUM_OPTS");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static Option swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + Option.class + " with value " + swigValue);
  }

  private Option(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private Option(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private Option(String swigName, Option swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static Option[] swigValues = { LOGLEVEL, PRODUCE_MODELS, PRODUCE_UNSAT_ASSUMPTIONS, PRODUCE_UNSAT_CORES, SEED, VERBOSITY, TIME_LIMIT_PER, MEMORY_LIMIT, NTHREADS, RELEVANT_TERMS, BV_SOLVER, REWRITE_LEVEL, SAT_SOLVER, PROP_CONST_BITS, PROP_INFER_INEQ_BOUNDS, PROP_NPROPS, PROP_NUPDATES, PROP_OPT_LT_CONCAT_SEXT, PROP_PATH_SEL, PROP_PROB_RANDOM_INPUT, PROP_PROB_USE_INV_VALUE, PROP_SEXT, PROP_NORMALIZE, ABSTRACTION, ABSTRACTION_BV_SIZE, ABSTRACTION_EAGER_REFINE, ABSTRACTION_VALUE_LIMIT, ABSTRACTION_VALUE_ONLY, ABSTRACTION_ASSERT, ABSTRACTION_ASSERT_REFS, ABSTRACTION_INITIAL_LEMMAS, ABSTRACTION_INC_BITBLAST, ABSTRACTION_BV_ADD, ABSTRACTION_BV_MUL, ABSTRACTION_BV_UDIV, ABSTRACTION_BV_UREM, ABSTRACTION_EQUAL, ABSTRACTION_ITE, PREPROCESS, PP_CONTRADICTING_ANDS, PP_ELIM_BV_EXTRACTS, PP_ELIM_BV_UDIV, PP_EMBEDDED_CONSTR, PP_FLATTEN_AND, PP_NORMALIZE, PP_SKELETON_PREPROC, PP_VARIABLE_SUBST, PP_VARIABLE_SUBST_NORM_EQ, PP_VARIABLE_SUBST_NORM_DISEQ, PP_VARIABLE_SUBST_NORM_BV_INEQ, DBG_RW_NODE_THRESH, DBG_PP_NODE_THRESH, DBG_CHECK_MODEL, DBG_CHECK_UNSAT_CORE, NUM_OPTS };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

